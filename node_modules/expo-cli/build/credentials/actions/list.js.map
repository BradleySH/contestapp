{"version":3,"sources":["../../../src/credentials/actions/list.ts"],"names":["displayProjectCredentials","experienceName","bundleIdentifier","credentials","appCredential","appCredentials","find","chalk","bold","displayIosAppCredentials","distCertId","distCredentialsId","distCert","userCredentials","credential","id","displayIosUserCredentials","pushKeyId","pushCredentialsId","pushKey","displayIosCredentials","cred","provisioningProfile","green","provisioningProfileId","teamId","teamName","pushP12","pushPassword","pushId","type","apnsKeyId","certId","log","warn","field","usedByApps","filter","c","map","join","usedByAppsText","gray","displayAndroidCredentials","credentialsList","displayAndroidAppCredentials","tmpFilename","fs","pathExists","unlink","keystore","storeBuf","Buffer","from","writeFile","Android","logKeystoreHashes","keystorePath","error"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport uniq from 'lodash/uniq';\nimport isEmpty from 'lodash/isEmpty';\nimport fs from 'fs-extra';\nimport get from 'lodash/get';\nimport { AndroidCredentials as Android } from '@expo/xdl';\nimport {\n  AndroidCredentials,\n  IosAppCredentials,\n  IosCredentials,\n  IosDistCredentials,\n  IosPushCredentials,\n} from '../credentials';\n\nimport log from '../../log';\n\nexport async function displayProjectCredentials(\n  experienceName: string,\n  bundleIdentifier: string,\n  credentials: IosCredentials\n): Promise<void> {\n  const appCredential = credentials.appCredentials.find(\n    appCredential =>\n      appCredential.experienceName === experienceName &&\n      appCredential.bundleIdentifier === bundleIdentifier\n  );\n\n  if (!appCredential) {\n    log(\n      chalk.bold(\n        `No credentials configured for app ${experienceName} with bundle identifier ${bundleIdentifier}\\n`\n      )\n    );\n    return;\n  }\n\n  log();\n  log(chalk.bold('Project Credential Configuration:'));\n  displayIosAppCredentials(appCredential);\n  log();\n\n  const distCertId = appCredential.distCredentialsId;\n  const distCert =\n    distCertId && credentials.userCredentials.find(credential => credential.id === distCertId);\n  if (distCert) {\n    displayIosUserCredentials(distCert, credentials);\n  }\n\n  const pushKeyId = appCredential.pushCredentialsId;\n  const pushKey =\n    pushKeyId && credentials.userCredentials.find(credential => credential.id === pushKeyId);\n  if (pushKey) {\n    displayIosUserCredentials(pushKey, credentials);\n  }\n}\n\nexport async function displayIosCredentials(credentials: IosCredentials) {\n  log(chalk.bold('Available credentials for iOS apps\\n'));\n\n  log(chalk.bold('Application credentials\\n'));\n  for (const cred of credentials.appCredentials) {\n    displayIosAppCredentials(cred);\n    log();\n  }\n\n  log();\n  log(chalk.bold('User credentials\\n'));\n  for (const cred of credentials.userCredentials) {\n    displayIosUserCredentials(cred, credentials);\n    log();\n  }\n  log();\n  log();\n}\n\nexport function displayIosAppCredentials(appCredentials: IosAppCredentials) {\n  log(\n    `  Experience: ${chalk.bold(appCredentials.experienceName)}, bundle identifier: ${\n      appCredentials.bundleIdentifier\n    }`\n  );\n  if (appCredentials.credentials.provisioningProfile) {\n    log(\n      `    Provisioning profile (ID: ${chalk.green(\n        appCredentials.credentials.provisioningProfileId || '---------'\n      )})`\n    );\n  } else {\n    log('    Provisioning profile is missing. It will be generated during the next build');\n  }\n  if (appCredentials.credentials.teamId || appCredentials.credentials.teamName) {\n    log(\n      `    Apple Team ID: ${chalk.green(\n        appCredentials.credentials.teamId || '---------'\n      )},  Apple Team Name: ${chalk.green(appCredentials.credentials.teamName || '---------')}`\n    );\n  }\n  if (appCredentials.credentials.pushP12 && appCredentials.credentials.pushPassword) {\n    log(\n      `    (deprecated) Push Certificate (Push ID: ${chalk.green(\n        appCredentials.credentials.pushId || '-----'\n      )})`\n    );\n  }\n}\n\nexport function displayIosUserCredentials(\n  userCredentials: IosPushCredentials | IosDistCredentials,\n  credentials?: IosCredentials\n) {\n  if (userCredentials.type === 'push-key') {\n    log(`  Push Notifications Key - Key ID: ${chalk.green(userCredentials.apnsKeyId)}`);\n  } else if (userCredentials.type === 'dist-cert') {\n    log(\n      `  Distribution Certificate - Certificate ID: ${chalk.green(\n        userCredentials.certId || '-----'\n      )}`\n    );\n  } else {\n    log.warn(`  Unknown key type ${get(userCredentials, 'type')}`);\n  }\n  log(\n    `    Apple Team ID: ${chalk.green(\n      userCredentials.teamId || '---------'\n    )},  Apple Team Name: ${chalk.green(userCredentials.teamName || '---------')}`\n  );\n\n  if (credentials) {\n    const field = userCredentials.type === 'push-key' ? 'pushCredentialsId' : 'distCredentialsId';\n    const usedByApps = uniq(\n      credentials.appCredentials\n        .filter(c => c[field] === userCredentials.id)\n        .map(c => `${c.experienceName} (${c.bundleIdentifier})`)\n    ).join(',\\n      ');\n    const usedByAppsText = usedByApps ? `used by\\n      ${usedByApps}` : 'not used by any apps';\n    log(`    ${chalk.gray(usedByAppsText)}`);\n  }\n}\n\nexport async function displayAndroidCredentials(credentialsList: AndroidCredentials[]) {\n  log(chalk.bold('Available Android credentials'));\n  log();\n  for (const credentials of credentialsList) {\n    await displayAndroidAppCredentials(credentials);\n  }\n}\n\nexport async function displayAndroidAppCredentials(credentials: AndroidCredentials) {\n  const tmpFilename = `expo_tmp_keystore_file.jks`;\n  try {\n    if (await fs.pathExists(tmpFilename)) {\n      await fs.unlink(tmpFilename);\n    }\n\n    log(chalk.green(credentials.experienceName));\n    log(chalk.bold('  Upload Keystore hashes'));\n    if (!isEmpty(credentials.keystore)) {\n      const storeBuf = Buffer.from(get(credentials, 'keystore.keystore'), 'base64');\n      await fs.writeFile(tmpFilename, storeBuf);\n      await Android.logKeystoreHashes(\n        {\n          keystorePath: tmpFilename,\n          ...(credentials.keystore as Android.Keystore),\n        },\n        '    '\n      );\n    } else {\n      log('    -----------------------');\n    }\n    log(chalk.bold('  Push Notifications credentials'));\n    log(\n      '    FCM Api Key: ',\n      get(credentials, 'pushCredentials.fcmApiKey', '---------------------')\n    );\n    log('\\n');\n  } catch (error) {\n    log.error('  Failed to parse the keystore', error);\n    log('\\n');\n  } finally {\n    if (await fs.pathExists(tmpFilename)) {\n      await fs.unlink(tmpFilename);\n    }\n  }\n}\n"],"file":"list.js"}