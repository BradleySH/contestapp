{"version":3,"sources":["../../../src/credentials/views/SetupIosPush.ts"],"names":["SetupIosPush","constructor","options","experienceName","bundleIdentifier","_experienceName","_bundleIdentifier","_nonInteractive","nonInteractive","open","ctx","user","Error","appCredentials","ios","getAppCredentials","deprecatedPushId","deprecatedPushP12","deprecatedPushPassword","confirmQuestion","type","name","message","pageSize","Infinity","confirm","configuredPushKey","getPushKey","isValid","iosPushView","validatePushKey","CreateOrReusePushKey"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;AAEO,MAAMA,YAAN,CAAoC;AAKzCC,EAAAA,WAAW,CAACC,OAAD,EAAsC;AAAA;;AAAA;;AAAA;;AAAA;;AAC/C,UAAM;AAAEC,MAAAA,cAAF;AAAkBC,MAAAA;AAAlB,QAAuCF,OAA7C;AACA,SAAKG,eAAL,GAAuBF,cAAvB;AACA,SAAKG,iBAAL,GAAyBF,gBAAzB;AACA,SAAKG,eAAL,4BAAuBL,OAAO,CAACM,cAA/B,yEAAiD,KAAjD;AACD;;AAED,QAAMC,IAAN,CAAWC,GAAX,EAAgD;AAC9C,QAAI,CAACA,GAAG,CAACC,IAAT,EAAe;AACb,YAAM,IAAIC,KAAJ,CAAW,6CAAX,CAAN;AACD,KAH6C,CAK9C;;;AACA,UAAMC,cAAc,GAAG,MAAMH,GAAG,CAACI,GAAJ,CAAQC,iBAAR,CAC3B,KAAKV,eADsB,EAE3B,KAAKC,iBAFsB,CAA7B;AAIA,UAAMU,gBAAgB,GAAG,oBAAIH,cAAJ,EAAoB,oBAApB,CAAzB;AACA,UAAMI,iBAAiB,GAAG,oBAAIJ,cAAJ,EAAoB,qBAApB,CAA1B;AACA,UAAMK,sBAAsB,GAAG,oBAAIL,cAAJ,EAAoB,0BAApB,CAA/B;;AACA,QAAIG,gBAAgB,IAAIC,iBAApB,IAAyCC,sBAA7C,EAAqE;AACnE,YAAMC,eAAyB,GAAG;AAChCC,QAAAA,IAAI,EAAE,SAD0B;AAEhCC,QAAAA,IAAI,EAAE,SAF0B;AAGhCC,QAAAA,OAAO,EAAG,mGAHsB;AAIhCC,QAAAA,QAAQ,EAAEC;AAJsB,OAAlC;AAOA,YAAM;AAAEC,QAAAA;AAAF,UAAc,MAAM,wBAAON,eAAP,CAA1B;;AACA,UAAI,CAACM,OAAL,EAAc;AACZ,4BAAK,+BAA8BT,gBAAiB,UAApD;AACA,eAAO,IAAP;AACD;AACF;;AAED,UAAMU,iBAAiB,GAAG,MAAMhB,GAAG,CAACI,GAAJ,CAAQa,UAAR,CAC9B,KAAKtB,eADyB,EAE9B,KAAKC,iBAFyB,CAAhC;;AAKA,QAAIoB,iBAAJ,EAAuB;AACrB;AACA,YAAME,OAAO,GAAG,MAAMC,WAAW,GAACC,eAAZ,CAA4BpB,GAA5B,EAAiCgB,iBAAjC,CAAtB;;AACA,UAAIE,OAAJ,EAAa;AACX,eAAO,IAAP;AACD;AACF;;AAED,WAAO,KAAIC,WAAW,GAACE,oBAAhB,EAAqC;AAC1C5B,MAAAA,cAAc,EAAE,KAAKE,eADqB;AAE1CD,MAAAA,gBAAgB,EAAE,KAAKE,iBAFmB;AAG1CE,MAAAA,cAAc,EAAE,KAAKD;AAHqB,KAArC,CAAP;AAKD;;AA1DwC","sourcesContent":["import get from 'lodash/get';\nimport { prompt } from 'inquirer';\nimport * as iosPushView from './IosPushCredentials';\n\nimport { Context, IView } from '../context';\nimport { Question } from '../../prompt';\nimport log from '../../log';\n\nexport class SetupIosPush implements IView {\n  _experienceName: string;\n  _bundleIdentifier: string;\n  _nonInteractive: boolean;\n\n  constructor(options: iosPushView.PushKeyOptions) {\n    const { experienceName, bundleIdentifier } = options;\n    this._experienceName = experienceName;\n    this._bundleIdentifier = bundleIdentifier;\n    this._nonInteractive = options.nonInteractive ?? false;\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (!ctx.user) {\n      throw new Error(`This workflow requires you to be logged in.`);\n    }\n\n    // TODO: Remove this on Nov 2020 when Apple no longer accepts deprecated push certs\n    const appCredentials = await ctx.ios.getAppCredentials(\n      this._experienceName,\n      this._bundleIdentifier\n    );\n    const deprecatedPushId = get(appCredentials, 'credentials.pushId');\n    const deprecatedPushP12 = get(appCredentials, 'credentials.pushP12');\n    const deprecatedPushPassword = get(appCredentials, 'credentials.pushPassword');\n    if (deprecatedPushId && deprecatedPushP12 && deprecatedPushPassword) {\n      const confirmQuestion: Question = {\n        type: 'confirm',\n        name: 'confirm',\n        message: `We've detected legacy Push Certificates on file. Would you like to upgrade to the newer standard?`,\n        pageSize: Infinity,\n      };\n\n      const { confirm } = await prompt(confirmQuestion);\n      if (!confirm) {\n        log(`Using Deprecated Push Cert: ${deprecatedPushId} on file`);\n        return null;\n      }\n    }\n\n    const configuredPushKey = await ctx.ios.getPushKey(\n      this._experienceName,\n      this._bundleIdentifier\n    );\n\n    if (configuredPushKey) {\n      // we dont need to setup if we have a valid push key on file\n      const isValid = await iosPushView.validatePushKey(ctx, configuredPushKey);\n      if (isValid) {\n        return null;\n      }\n    }\n\n    return new iosPushView.CreateOrReusePushKey({\n      experienceName: this._experienceName,\n      bundleIdentifier: this._bundleIdentifier,\n      nonInteractive: this._nonInteractive,\n    });\n  }\n}\n"],"file":"SetupIosPush.js"}