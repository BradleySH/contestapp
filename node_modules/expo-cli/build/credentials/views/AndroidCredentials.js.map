{"version":3,"sources":["../../../src/credentials/views/AndroidCredentials.ts"],"names":["ExperienceView","constructor","experience","credentials","experienceName","shouldRefetch","keystore","pushCredentials","open","ctx","appCredentials","api","getAsync","user","username","action","type","name","message","choices","value","handleAction","context","selected","UpdateKeystore","UpdateFcmKey","DownloadKeystore","provideOrGenerate","putAsync","chalk","green","providedKeystore","keystoreSchema","tmpKeystoreName","fs","pathExists","unlink","keystoreData","Credentials","generateUploadKeystore","readFile","error","log","warn","fcmApiKey","validate","length","keystoreName","confirm","save","fetch","ApiV2","clientForUser","manifest","owner","slug","keystorePath","shouldLog","keystorePassword","keyAlias","keyPassword","storeBuf","Buffer","from","writeFile","bold"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAEO,MAAMA,cAAN,CAAsC;AAQ3CC,EAAAA,WAAW,CAACC,UAAD,EAAqBC,WAArB,EAA6D;AAAA;;AAAA;;AAAA,sCALhC,IAKgC;;AAAA,6CAJ/B,IAI+B;;AAAA,2CAF/C,IAE+C;;AACtE,SAAKD,UAAL,GAAkBA,UAAlB;;AACA,QAAIC,WAAW,IAAIA,WAAW,CAACC,cAA/B,EAA+C;AAC7C,WAAKC,aAAL,GAAqB,KAArB;AACA,WAAKD,cAAL,GAAsBD,WAAW,CAACC,cAAlC;AACA,WAAKE,QAAL,GAAgBH,WAAW,CAACG,QAA5B;AACA,WAAKC,eAAL,GAAuBJ,WAAW,CAACI,eAAnC;AACD;AACF;;AAED,QAAMC,IAAN,CAAWC,GAAX,EAAgD;AAC9C,QAAI,KAAKJ,aAAT,EAAwB;AACtB,YAAMK,cAAkC,GAAG,MAAMD,GAAG,CAACE,GAAJ,CAAQC,QAAR,CAC9C,wBAAuBH,GAAG,CAACI,IAAJ,CAASC,QAAS,IAAG,KAAKZ,UAAW,EADd,CAAjD;AAGA,WAAKE,cAAL,GAAsB,oBAAIM,cAAJ,EAAoB,gBAApB,CAAtB;AACA,WAAKJ,QAAL,GAAgB,oBAAII,cAAJ,EAAoB,UAApB,CAAhB;AACA,WAAKH,eAAL,GAAuB,oBAAIG,cAAJ,EAAoB,iBAApB,CAAvB;AACD;;AACD,QAAI,CAAC,KAAKN,cAAV,EAA0B;AACxB,WAAKA,cAAL,GAAuB,IAAGK,GAAG,CAACI,IAAJ,CAASC,QAAS,IAAG,KAAKZ,UAAW,EAA/D;AACD;;AAED,QAAI,wBAAQ,KAAKI,QAAb,KAA0B,wBAAQ,KAAKC,eAAb,CAA9B,EAA6D;AAC3D,0BAAK,gCAA+B,KAAKL,UAAW,gBAApD;AACD,KAFD,MAEO,IAAI,KAAKE,cAAT,EAAyB;AAC9B;AACA,YAAM,0CAA6B;AACjCA,QAAAA,cAAc,EAAE,KAAKA,cADY;AAEjCE,QAAAA,QAAQ,EAAE,KAAKA,QAFkB;AAGjCC,QAAAA,eAAe,EAAE,KAAKA;AAHW,OAA7B,CAAN;AAKA;AACD;;AAED,UAAM;AAAEQ,MAAAA;AAAF,QAAa,MAAM,uBAAO,CAC9B;AACEC,MAAAA,IAAI,EAAE,MADR;AAEEC,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,OAAO,EAAE,yBAHX;AAIEC,MAAAA,OAAO,EAAE,CACP;AAAEC,QAAAA,KAAK,EAAE,iBAAT;AAA4BH,QAAAA,IAAI,EAAE;AAAlC,OADO,EAEP;AAAEG,QAAAA,KAAK,EAAE,gBAAT;AAA2BH,QAAAA,IAAI,EAAE;AAAjC,OAFO,EAGP;AAAEG,QAAAA,KAAK,EAAE,gBAAT;AAA2BH,QAAAA,IAAI,EAAE;AAAjC,OAHO,CAIP;AACA;AACA;AACA;AACA;AACA;AATO;AAJX,KAD8B,CAAP,CAAzB;AAmBA,WAAO,KAAKI,YAAL,CAAkBZ,GAAlB,EAAuBM,MAAvB,CAAP;AACD;;AAEDM,EAAAA,YAAY,CAACC,OAAD,EAAmBC,QAAnB,EAAmD;AAC7D,YAAQA,QAAR;AACE,WAAK,iBAAL;AACE,aAAKlB,aAAL,GAAqB,IAArB;AACA,eAAO,IAAImB,cAAJ,CAAmB,KAAKtB,UAAxB,CAAP;;AACF,WAAK,gBAAL;AACE,aAAKG,aAAL,GAAqB,IAArB;AACA,eAAO,IAAIoB,YAAJ,CAAiB,KAAKvB,UAAtB,CAAP;;AACF,WAAK,gBAAL;AACE,eAAO,IAAIwB,gBAAJ,CAAqB,KAAKxB,UAA1B,EAAsC,KAAKI,QAA3C,CAAP;;AACF,WAAK,mBAAL;AACE,eAAO,IAAP;AAVJ;;AAYA,WAAO,IAAP;AACD;;AA/E0C;;;;AAkFtC,MAAMkB,cAAN,CAAsC;AAG3CvB,EAAAA,WAAW,CAACC,UAAD,EAAqB;AAAA;;AAC9B,SAAKA,UAAL,GAAkBA,UAAlB;AACD;;AAED,QAAMM,IAAN,CAAWC,GAAX,EAAgD;AAC9C,UAAMH,QAAQ,GAAG,MAAM,KAAKqB,iBAAL,CAAuBlB,GAAvB,CAAvB;AACA,UAAMA,GAAG,CAACE,GAAJ,CAAQiB,QAAR,CACH,iCAAgCnB,GAAG,CAACI,IAAJ,CAASC,QAAS,IAAG,KAAKZ,UAAW,EADlE,EAEJ;AAAEI,MAAAA;AAAF,KAFI,CAAN;AAIA,wBAAIuB,iBAAMC,KAAN,CAAY,+BAAZ,CAAJ;AACA,WAAO,IAAP;AACD;;AAED,QAAMH,iBAAN,CAAwBlB,GAAxB,EAAqE;AACnE,UAAMsB,gBAAgB,GAAG,MAAM,gDAAmBC,6BAAnB,CAA/B;;AACA,QAAID,gBAAJ,EAAsB;AACpB,aAAOA,gBAAP;AACD;;AAED,UAAME,eAAe,GAAI,GAAE,KAAK/B,UAAW,UAA3C;;AACA,QAAI;AACF,UAAI,MAAMgC,mBAAGC,UAAH,CAAcF,eAAd,CAAV,EAA0C;AACxC,cAAMC,mBAAGE,MAAH,CAAUH,eAAV,CAAN;AACD;;AACD,YAAMI,YAAY,GAAG,MAAMC,0BAAYC,sBAAZ,CACzBN,eADyB,EAEzB,iBAFyB,EAEN;AAClB,UAAGxB,GAAG,CAACI,IAAJ,CAASC,QAAS,IAAG,KAAKZ,UAAW,EAHhB,CAA3B;AAMA,aAAO,EACL,GAAGmC,YADE;AAEL/B,QAAAA,QAAQ,EAAE,MAAM4B,mBAAGM,QAAH,CAAYP,eAAZ,EAA6B,QAA7B;AAFX,OAAP;AAID,KAdD,CAcE,OAAOQ,KAAP,EAAc;AACdC,qBAAIC,IAAJ,CACE,2GADF;;AAGA,YAAMF,KAAN;AACD,KAnBD,SAmBU;AACR,UAAI,MAAMP,mBAAGC,UAAH,CAAcF,eAAd,CAAV,EAA0C;AACxC,cAAMC,mBAAGE,MAAH,CAAUH,eAAV,CAAN;AACD;AACF;AACF;;AAhD0C;;;;AAmDtC,MAAMR,YAAN,CAAoC;AAGzCxB,EAAAA,WAAW,CAACC,UAAD,EAAqB;AAAA;;AAC9B,SAAKA,UAAL,GAAkBA,UAAlB;AACD;;AAED,QAAMM,IAAN,CAAWC,GAAX,EAAgD;AAC9C,UAAM;AAAEmC,MAAAA;AAAF,QAAgB,MAAM,uBAAO,CACjC;AACE5B,MAAAA,IAAI,EAAE,OADR;AAEEC,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,OAAO,EAAE,aAHX;AAIE2B,MAAAA,QAAQ,EAAEzB,KAAK,IAAIA,KAAK,CAAC0B,MAAN,GAAe,CAAf,IAAoB;AAJzC,KADiC,CAAP,CAA5B;AASA,UAAMrC,GAAG,CAACE,GAAJ,CAAQiB,QAAR,CAAkB,6BAA4BnB,GAAG,CAACI,IAAJ,CAASC,QAAS,IAAG,KAAKZ,UAAW,EAAnF,EAAsF;AAC1F0C,MAAAA;AAD0F,KAAtF,CAAN;AAGA,wBAAIf,iBAAMC,KAAN,CAAY,sBAAZ,CAAJ;AACA,WAAO,IAAP;AACD;;AAtBwC;;;;AAyBpC,MAAMJ,gBAAN,CAAwC;AAI7CzB,EAAAA,WAAW,CAACC,UAAD,EAAqBC,WAAwC,GAAG,IAAhE,EAAsE;AAAA;;AAAA;;AAC/E,SAAKA,WAAL,GAAmBA,WAAnB;AACA,SAAKD,UAAL,GAAkBA,UAAlB;AACD;;AAED,QAAMM,IAAN,CAAWC,GAAX,EAAgD;AAC9C,UAAMsC,YAAY,GAAI,GAAE,KAAK7C,UAAW,UAAxC;AACA,UAAM;AAAE8C,MAAAA;AAAF,QAAc,MAAM,uBAAO;AAC/BhC,MAAAA,IAAI,EAAE,SADyB;AAE/BC,MAAAA,IAAI,EAAE,SAFyB;AAG/BC,MAAAA,OAAO,EAAE;AAHsB,KAAP,CAA1B;AAKA,wBAAIW,iBAAMC,KAAN,CAAa,sBAAqBiB,YAAa,EAA/C,CAAJ;AACA,UAAM,KAAKE,IAAL,CAAUxC,GAAV,EAAesC,YAAf,EAA6BC,OAA7B,CAAN;AACA,WAAO,IAAP;AACD;;AAED,QAAME,KAAN,CAAYzC,GAAZ,EAAyC;AACvC,UAAMN,WAAW,GAAG,MAAMgD,aAAMC,aAAN,CAAoB3C,GAAG,CAACI,IAAxB,EAA8BD,QAA9B,CACvB,wBAAuBH,GAAG,CAAC4C,QAAJ,CAAaC,KAAb,IAAsB7C,GAAG,CAACI,IAAJ,CAASC,QAAS,IAAGL,GAAG,CAAC4C,QAAJ,CAAaE,IAAK,EAD7D,CAA1B;;AAGA,QAAIpD,WAAW,IAAIA,WAAW,CAACG,QAA/B,EAAyC;AACvC,WAAKH,WAAL,GAAmBA,WAAW,CAACG,QAA/B;AACD;AACF;;AAED,QAAM2C,IAAN,CAAWxC,GAAX,EAAyB+C,YAAzB,EAA+CC,SAAkB,GAAG,KAApE,EAA0F;AACxF,QAAI,MAAMvB,mBAAGC,UAAH,CAAcqB,YAAd,CAAV,EAAuC;AACrC,YAAMtB,mBAAGE,MAAH,CAAUoB,YAAV,CAAN;AACD;;AACD,UAAM;AAAElD,MAAAA,QAAF;AAAYoD,MAAAA,gBAAZ;AAA8BC,MAAAA,QAA9B;AAAwCC,MAAAA;AAAxC,QAA6D,KAAKzD,WAAL,IAAoB,EAAvF;;AACA,QAAI,CAACG,QAAD,IAAa,CAACoD,gBAAd,IAAkC,CAACC,QAAnC,IAA+C,CAACC,WAApD,EAAiE;AAC/DlB,qBAAIC,IAAJ,CAAS,iDAAT;;AACA;AACD;;AAED,UAAMkB,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYzD,QAAZ,EAAsB,QAAtB,CAAjB;AACA,UAAM4B,mBAAG8B,SAAH,CAAaR,YAAb,EAA2BK,QAA3B,CAAN;;AAEA,QAAIJ,SAAJ,EAAe;AACb,0BAAK;uBACY5B,iBAAMoC,IAAN,CAAWP,gBAAX,CAA6B;uBAC7B7B,iBAAMoC,IAAN,CAAWN,QAAX,CAAqB;uBACrB9B,iBAAMoC,IAAN,CAAWL,WAAX,CAAwB;;uBAExBJ,YAAa;OAL9B;AAOD;AACF;;AApD4C","sourcesContent":["import { ApiV2, AndroidCredentials as Credentials } from '@expo/xdl';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport prompt from '../../prompt';\nimport log from '../../log';\n\nimport { Context, IView } from '../context';\nimport { AndroidCredentials, FcmCredentials, keystoreSchema } from '../credentials';\nimport { displayAndroidAppCredentials } from '../actions/list';\nimport { askForUserProvided } from '../actions/promptForCredentials';\n\nexport class ExperienceView implements IView {\n  experience: string;\n  experienceName?: string;\n  keystore: Credentials.Keystore | null = null;\n  pushCredentials: FcmCredentials | null = null;\n\n  shouldRefetch: boolean = true;\n\n  constructor(experience: string, credentials: AndroidCredentials | null) {\n    this.experience = experience;\n    if (credentials && credentials.experienceName) {\n      this.shouldRefetch = false;\n      this.experienceName = credentials.experienceName;\n      this.keystore = credentials.keystore;\n      this.pushCredentials = credentials.pushCredentials;\n    }\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (this.shouldRefetch) {\n      const appCredentials: AndroidCredentials = await ctx.api.getAsync(\n        `credentials/android/@${ctx.user.username}/${this.experience}`\n      );\n      this.experienceName = get(appCredentials, 'experienceName');\n      this.keystore = get(appCredentials, 'keystore');\n      this.pushCredentials = get(appCredentials, 'pushCredentials');\n    }\n    if (!this.experienceName) {\n      this.experienceName = `@${ctx.user.username}/${this.experience}`;\n    }\n\n    if (isEmpty(this.keystore) && isEmpty(this.pushCredentials)) {\n      log(`No credentials available for ${this.experience} experience.\\n`);\n    } else if (this.experienceName) {\n      log();\n      await displayAndroidAppCredentials({\n        experienceName: this.experienceName,\n        keystore: this.keystore,\n        pushCredentials: this.pushCredentials,\n      });\n      log();\n    }\n\n    const { action } = await prompt([\n      {\n        type: 'list',\n        name: 'action',\n        message: 'What do you want to do?',\n        choices: [\n          { value: 'update-keystore', name: 'Update Upload Keystore' },\n          { value: 'update-fcm-key', name: 'Update FCM Api Key' },\n          { value: 'fetch-keystore', name: 'Download Keystore from the Expo servers' },\n          // { value: 'fetch-public-cert', name: 'Extract public cert from keystore' },\n          // {\n          //   value: 'fetch-private-signing-key',\n          //   name:\n          //     'Extract private signing key (required when migration to App Signing by Google Play)',\n          // },\n        ],\n      },\n    ]);\n\n    return this.handleAction(ctx, action);\n  }\n\n  handleAction(context: Context, selected: string): IView | null {\n    switch (selected) {\n      case 'update-keystore':\n        this.shouldRefetch = true;\n        return new UpdateKeystore(this.experience);\n      case 'update-fcm-key':\n        this.shouldRefetch = true;\n        return new UpdateFcmKey(this.experience);\n      case 'fetch-keystore':\n        return new DownloadKeystore(this.experience, this.keystore);\n      case 'fetch-public-cert':\n        return null;\n    }\n    return null;\n  }\n}\n\nexport class UpdateKeystore implements IView {\n  experience: string;\n\n  constructor(experience: string) {\n    this.experience = experience;\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    const keystore = await this.provideOrGenerate(ctx);\n    await ctx.api.putAsync(\n      `credentials/android/keystore/@${ctx.user.username}/${this.experience}`,\n      { keystore }\n    );\n    log(chalk.green('Updated Keystore successfully'));\n    return null;\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<Credentials.Keystore> {\n    const providedKeystore = await askForUserProvided(keystoreSchema);\n    if (providedKeystore) {\n      return providedKeystore;\n    }\n\n    const tmpKeystoreName = `${this.experience}_tmp.jks`;\n    try {\n      if (await fs.pathExists(tmpKeystoreName)) {\n        await fs.unlink(tmpKeystoreName);\n      }\n      const keystoreData = await Credentials.generateUploadKeystore(\n        tmpKeystoreName,\n        '---------------', // TODO: add android package (it's not required)\n        `@${ctx.user.username}/${this.experience}`\n      );\n\n      return {\n        ...keystoreData,\n        keystore: await fs.readFile(tmpKeystoreName, 'base64'),\n      };\n    } catch (error) {\n      log.warn(\n        \"If you don't provide your own Android keystore, it will be generated on our servers during the next build\"\n      );\n      throw error;\n    } finally {\n      if (await fs.pathExists(tmpKeystoreName)) {\n        await fs.unlink(tmpKeystoreName);\n      }\n    }\n  }\n}\n\nexport class UpdateFcmKey implements IView {\n  experience: string;\n\n  constructor(experience: string) {\n    this.experience = experience;\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    const { fcmApiKey } = await prompt([\n      {\n        type: 'input',\n        name: 'fcmApiKey',\n        message: 'FCM Api Key',\n        validate: value => value.length > 0 || \"FCM Api Key can't be empty\",\n      },\n    ]);\n\n    await ctx.api.putAsync(`credentials/android/push/@${ctx.user.username}/${this.experience}`, {\n      fcmApiKey,\n    });\n    log(chalk.green('Updated successfully'));\n    return null;\n  }\n}\n\nexport class DownloadKeystore implements IView {\n  experience: string;\n  credentials: Credentials.Keystore | null;\n\n  constructor(experience: string, credentials: Credentials.Keystore | null = null) {\n    this.credentials = credentials;\n    this.experience = experience;\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    const keystoreName = `${this.experience}.bak.jks`;\n    const { confirm } = await prompt({\n      type: 'confirm',\n      name: 'confirm',\n      message: 'Do you want to display the Android Keystore credentials?',\n    });\n    log(chalk.green(`Saving Keystore to ${keystoreName}`));\n    await this.save(ctx, keystoreName, confirm);\n    return null;\n  }\n\n  async fetch(ctx: Context): Promise<void> {\n    const credentials = await ApiV2.clientForUser(ctx.user).getAsync(\n      `credentials/android/@${ctx.manifest.owner || ctx.user.username}/${ctx.manifest.slug}`\n    );\n    if (credentials && credentials.keystore) {\n      this.credentials = credentials.keystore;\n    }\n  }\n\n  async save(ctx: Context, keystorePath: string, shouldLog: boolean = false): Promise<void> {\n    if (await fs.pathExists(keystorePath)) {\n      await fs.unlink(keystorePath);\n    }\n    const { keystore, keystorePassword, keyAlias, keyPassword }: any = this.credentials || {};\n    if (!keystore || !keystorePassword || !keyAlias || !keyPassword) {\n      log.warn('There is no valid Keystore defined for this app');\n      return;\n    }\n\n    const storeBuf = Buffer.from(keystore, 'base64');\n    await fs.writeFile(keystorePath, storeBuf);\n\n    if (shouldLog) {\n      log(`Keystore credentials\n  Keystore password: ${chalk.bold(keystorePassword)}\n  Key alias:         ${chalk.bold(keyAlias)}\n  Key password:      ${chalk.bold(keyPassword)}\n\n  Path to Keystore:  ${keystorePath}\n      `);\n    }\n  }\n}\n"],"file":"AndroidCredentials.js"}