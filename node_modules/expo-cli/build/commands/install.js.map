{"version":3,"sources":["../../src/commands/install.ts"],"names":["installAsync","packages","options","projectRoot","workflow","process","cwd","packageManager","PackageManager","createForProject","npm","yarn","log","addAsync","exp","ConfigUtils","getConfig","Versions","gteSdkVersion","CommandError","sdkVersion","fs","existsSync","path","join","nodeModulesPath","warn","name","bundledNativeModules","JsonFile","readAsync","resolveModule","nativeModules","others","versionedPackages","map","arg","spec","includes","type","version","modifiedSpec","push","raw","messages","length","program","command","alias","option","description","asyncAction"],"mappings":"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","sourcesContent":["import * as ConfigUtils from '@expo/config';\nimport fs from 'fs';\nimport JsonFile from '@expo/json-file';\nimport npmPackageArg from 'npm-package-arg';\nimport path from 'path';\nimport { Versions } from '@expo/xdl';\nimport { Command } from 'commander';\n\nimport * as PackageManager from '@expo/package-manager';\nimport CommandError from '../CommandError';\nimport { findProjectRootAsync } from './utils/ProjectUtils';\nimport log from '../log';\n\nasync function installAsync(packages: string[], options: PackageManager.CreateForProjectOptions) {\n  const { projectRoot, workflow } = await findProjectRootAsync(process.cwd());\n  const packageManager = PackageManager.createForProject(projectRoot, {\n    npm: options.npm,\n    yarn: options.yarn,\n    log,\n  });\n\n  if (workflow === 'bare') {\n    return await packageManager.addAsync(...packages);\n  }\n\n  const { exp } = ConfigUtils.getConfig(projectRoot);\n  if (!Versions.gteSdkVersion(exp, '33.0.0')) {\n    throw new CommandError(\n      'UNSUPPORTED_SDK_VERSION',\n      `expo install is only available for managed apps using Expo SDK version 33 or higher. Current version: ${exp.sdkVersion}.`\n    );\n  }\n\n  if (!fs.existsSync(path.join(exp.nodeModulesPath || projectRoot, 'node_modules'))) {\n    log.warn(`node_modules not found, running ${packageManager.name} install command.`);\n    await packageManager.installAsync();\n  }\n\n  const bundledNativeModules = await JsonFile.readAsync(\n    ConfigUtils.resolveModule('expo/bundledNativeModules.json', projectRoot, exp)\n  );\n\n  const nativeModules = [];\n  const others = [];\n  const versionedPackages = packages.map(arg => {\n    const spec = npmPackageArg(arg);\n    const { name } = spec;\n    if (['tag', 'version', 'range'].includes(spec.type) && name && bundledNativeModules[name]) {\n      // Unimodule packages from npm registry are modified to use the bundled version.\n      const version = bundledNativeModules[name];\n      const modifiedSpec = `${name}@${version}`;\n      nativeModules.push(modifiedSpec);\n      return modifiedSpec;\n    } else {\n      // Other packages are passed through unmodified.\n      others.push(spec.raw);\n      return spec.raw;\n    }\n  });\n  const messages = [];\n  if (nativeModules.length > 0) {\n    messages.push(\n      `${nativeModules.length} SDK ${exp.sdkVersion} compatible native ${\n        nativeModules.length === 1 ? 'module' : 'modules'\n      }`\n    );\n  }\n  if (others.length > 0) {\n    messages.push(`${others.length} other ${others.length === 1 ? 'package' : 'packages'}`);\n  }\n  log(`Installing ${messages.join(' and ')} using ${packageManager.name}.`);\n  await packageManager.addAsync(...versionedPackages);\n}\n\nexport default function (program: Command) {\n  program\n    .command('install [packages...]')\n    .alias('add')\n    .option('--npm', 'Use npm to install dependencies. (default when package-lock.json exists)')\n    .option('--yarn', 'Use Yarn to install dependencies. (default when yarn.lock exists)')\n    .description('Installs a unimodule or other package to a project.')\n    .asyncAction(installAsync);\n}\n"],"file":"install.js"}