{"version":3,"sources":["../../../src/commands/build/AndroidBuilder.ts"],"names":["ANDROID","PLATFORMS","AndroidBuilder","BaseBuilder","run","validateProject","Android","checkSplashScreenImages","projectDir","checkForBuildInProgress","collectAndValidateCredentials","publishedExpIds","options","publicUrl","undefined","ensureReleaseExists","checkStatusBeforeBuild","build","utils","checkIfSdkIsSupported","manifest","sdkVersion","BuildError","androidPackage","test","_clearCredentials","credentialMetadata","Credentials","getCredentialMetadataAsync","log","newLine","warn","chalk","red","bold","questions","type","name","message","answers","confirm","ctx","Context","init","backupKeystoreOutputPath","path","resolve","slug","view","DownloadKeystore","fetch","save","removeCredentialsForPlatform","credentialsExist","credentialsExistForPlatformAsync","checkEnv","collectAndValidateCredentialsFromCI","generateKeystore","clearCredentials","console","choices","value","validate","keystorePath","keystorePathStats","fs","stat","isFile","e","filter","isAbsolute","when","uploadKeystore","val","password","keystoreAlias","keystorePassword","keyPassword","keystoreData","readFile","credentials","keystore","toString","keyAlias","updateCredentialsForPlatform","allEnvSet","process","env","EXPO_ANDROID_KEYSTORE_PASSWORD","EXPO_ANDROID_KEY_PASSWORD","Error","platform"],"mappings":"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","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport untildify from 'untildify';\nimport { Android, AndroidCredentials, Credentials } from '@expo/xdl';\nimport chalk from 'chalk';\nimport get from 'lodash/get';\n\nimport invariant from 'invariant';\nimport log from '../../log';\nimport BuildError from './BuildError';\nimport BaseBuilder from './BaseBuilder';\nimport prompt, { Question } from '../../prompt';\nimport * as utils from './utils';\nimport { PLATFORMS, Platform } from './constants';\nimport { Context } from '../../credentials';\nimport { DownloadKeystore } from '../../credentials/views/AndroidCredentials';\n\nconst { ANDROID } = PLATFORMS;\n\nexport default class AndroidBuilder extends BaseBuilder {\n  async run(): Promise<void> {\n    // Validate project\n    await this.validateProject();\n\n    // Check SplashScreen images sizes\n    await Android.checkSplashScreenImages(this.projectDir);\n\n    // Check the status of any current builds\n    await this.checkForBuildInProgress();\n    // Check for existing credentials, collect any missing credentials, and validate them\n    await this.collectAndValidateCredentials();\n    // Publish the current experience, if necessary\n    let publishedExpIds = this.options.publicUrl ? undefined : await this.ensureReleaseExists();\n\n    if (!this.options.publicUrl) {\n      await this.checkStatusBeforeBuild();\n    }\n\n    // Initiate a build\n    await this.build(publishedExpIds);\n  }\n\n  async validateProject() {\n    await utils.checkIfSdkIsSupported(this.manifest.sdkVersion!, ANDROID);\n    if (!get(this.manifest, 'android.package')) {\n      throw new BuildError(`Your project must have an Android package set in app.json\nSee https://docs.expo.io/distribution/building-standalone-apps/#2-configure-appjson`);\n    }\n    const androidPackage = get(this.manifest, 'android.package');\n    if (!androidPackage) {\n      throw new BuildError('Your project must have an Android package set in app.json.');\n    }\n    if (!/^[a-zA-Z][a-zA-Z0-9_]*(\\.[a-zA-Z][a-zA-Z0-9_]*)+$/.test(androidPackage)) {\n      throw new BuildError(\n        \"Invalid format of Android package name (only alphanumeric characters, '.' and '_' are allowed, and each '.' must be followed by a letter)\"\n      );\n    }\n  }\n\n  async _clearCredentials() {\n    const credentialMetadata = await Credentials.getCredentialMetadataAsync(\n      this.projectDir,\n      ANDROID\n    );\n    log.newLine();\n    log.warn(\n      `⚠️  Clearing your Android build credentials from our build servers is a ${chalk.red(\n        'PERMANENT and IRREVERSIBLE action.'\n      )}`\n    );\n    log.warn(\n      chalk.bold(\n        'Android keystores must be identical to the one previously used to submit your app to the Google Play Store.'\n      )\n    );\n    log.warn(\n      'Please read https://docs.expo.io/distribution/building-standalone-apps/#if-you-choose-to-build-for-android for more info before proceeding.'\n    );\n    log.newLine();\n    log.warn(\n      chalk.bold('Your keystore will be backed up to your current directory if you continue.')\n    );\n    log.newLine();\n    let questions: Question[] = [\n      {\n        type: 'confirm',\n        name: 'confirm',\n        message: 'Permanently delete the Android build credentials from our servers?',\n      },\n    ];\n\n    const answers = await prompt(questions);\n\n    if (answers.confirm) {\n      log('Backing up your Android keystore now...');\n      const ctx = new Context();\n      await ctx.init(this.projectDir);\n\n      const backupKeystoreOutputPath = path.resolve(this.projectDir, `${ctx.manifest.slug}.jks`);\n\n      invariant(ctx.manifest.slug, 'app.json slug field must be set');\n      const view = new DownloadKeystore(ctx.manifest.slug as string);\n      await view.fetch(ctx);\n      await view.save(ctx, backupKeystoreOutputPath, true);\n      await Credentials.removeCredentialsForPlatform(ANDROID, credentialMetadata);\n      log.warn('Removed existing credentials from Expo servers');\n    }\n  }\n\n  async collectAndValidateCredentials() {\n    const credentialMetadata = await Credentials.getCredentialMetadataAsync(\n      this.projectDir,\n      ANDROID\n    );\n\n    const credentialsExist = await Credentials.credentialsExistForPlatformAsync(credentialMetadata);\n\n    if (this.checkEnv()) {\n      await this.collectAndValidateCredentialsFromCI(credentialMetadata);\n    } else if (\n      !this.options.generateKeystore &&\n      (this.options.clearCredentials || !credentialsExist)\n    ) {\n      console.log('');\n      const questions: Question[] = [\n        {\n          type: 'rawlist',\n          name: 'uploadKeystore',\n          message: `Would you like to upload a keystore or have us generate one for you?\\nIf you don't know what this means, let us handle it! :)\\n`,\n          choices: [\n            { name: 'Let Expo handle the process!', value: false },\n            { name: 'I want to upload my own keystore!', value: true },\n          ],\n        },\n        {\n          type: 'input',\n          name: 'keystorePath',\n          message: `Path to keystore:`,\n          validate: async (keystorePath: string): Promise<boolean> => {\n            try {\n              const keystorePathStats = await fs.stat(keystorePath);\n              return keystorePathStats.isFile();\n            } catch (e) {\n              // file does not exist\n              console.log('\\nFile does not exist.');\n              return false;\n            }\n          },\n          filter: (keystorePath: string): string => {\n            keystorePath = untildify(keystorePath);\n            if (!path.isAbsolute(keystorePath)) {\n              keystorePath = path.resolve(keystorePath);\n            }\n            return keystorePath;\n          },\n          // @ts-ignore: The expected type comes from property 'when' which is declared here on type 'Question<Record<string, any>>'\n          when: (answers: Record<string, Question>) => answers.uploadKeystore,\n        },\n        {\n          type: 'password',\n          name: 'keystorePassword',\n          message: `Keystore Password:`,\n          validate: (val: string): boolean => val !== '',\n          // @ts-ignore: The expected type comes from property 'when' which is declared here on type 'Question<Record<string, any>>'\n          when: (answers: Record<string, Question>) => answers.uploadKeystore,\n        },\n        {\n          type: 'input',\n          name: 'keystoreAlias',\n          message: `Keystore Alias:`,\n          validate: (val: string): boolean => val !== '',\n          // @ts-ignore: The expected type comes from property 'when' which is declared here on type 'Question<Record<string, any>>'\n          when: (answers: Record<string, Question>) => answers.uploadKeystore,\n        },\n        {\n          type: 'password',\n          name: 'keyPassword',\n          message: `Key Password:`,\n          validate: (password: string): boolean => {\n            if (password === '') {\n              return false;\n            }\n            // Todo validate keystore passwords\n            return true;\n          },\n          // @ts-ignore: The expected type comes from property 'when' which is declared here on type 'Question<Record<string, any>>'\n          when: (answers: Record<string, Question>) => answers.uploadKeystore,\n        },\n      ];\n\n      const answers = await prompt(questions);\n\n      if (!answers.uploadKeystore) {\n        if (this.options.clearCredentials && credentialsExist) {\n          await this._clearCredentials();\n        }\n        // just continue\n      } else {\n        const { keystorePath, keystoreAlias, keystorePassword, keyPassword } = answers;\n\n        // read the keystore\n        const keystoreData = await fs.readFile(keystorePath);\n\n        const credentials: AndroidCredentials.Keystore = {\n          keystore: keystoreData.toString('base64'),\n          keyAlias: keystoreAlias,\n          keystorePassword,\n          keyPassword,\n        };\n        await Credentials.updateCredentialsForPlatform(\n          ANDROID,\n          // @ts-ignore: Type '{ keystore: string; keystoreAlias: any; keystorePassword: any; keyPassword: any; }' has no properties in common with type 'Credentials'.\n          credentials,\n          [],\n          credentialMetadata\n        );\n      }\n    }\n  }\n\n  checkEnv(): boolean {\n    const allEnvSet =\n      !!this.options.keystorePath &&\n      !!this.options.keystoreAlias &&\n      !!process.env.EXPO_ANDROID_KEYSTORE_PASSWORD &&\n      !!process.env.EXPO_ANDROID_KEY_PASSWORD;\n\n    if (allEnvSet) {\n      return true;\n    }\n\n    // Check if user was trying to upload keystore incorretly and supply an helpful error message if so.\n    if (this.options.keystorePath || this.options.keystoreAlias) {\n      throw Error(\n        'When uploading your own keystore you must provide:\\n' +\n          '\\t--keystore-path /path/to/your/keystore.jks \\n' +\n          '\\t--keystore-alias PUT_KEYSTORE_ALIAS_HERE \\n' +\n          'And set the enviroment variables:\\n' +\n          '\\tEXPO_ANDROID_KEYSTORE_PASSWORD\\n' +\n          '\\tEXPO_ANDROID_KEY_PASSWORD\\n' +\n          'For details, see:\\n' +\n          '\\thttps://docs.expo.io/distribution/building-standalone-apps/#if-you-choose-to-build-for-android'\n      );\n    }\n    return false;\n  }\n\n  async collectAndValidateCredentialsFromCI(\n    credentialMetadata: Credentials.CredentialMetadata\n  ): Promise<void> {\n    const credentials: any = {\n      keystore: (await fs.readFile(this.options.keystorePath!)).toString('base64'),\n      keystoreAlias: this.options.keystoreAlias,\n      keystorePassword: process.env.EXPO_ANDROID_KEYSTORE_PASSWORD,\n      keyPassword: process.env.EXPO_ANDROID_KEY_PASSWORD,\n    };\n    await Credentials.updateCredentialsForPlatform(ANDROID, credentials, [], credentialMetadata);\n  }\n\n  platform(): Platform {\n    return ANDROID;\n  }\n}\n"],"file":"AndroidBuilder.js"}