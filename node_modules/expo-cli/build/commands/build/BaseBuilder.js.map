{"version":3,"sources":["../../../src/commands/build/BaseBuilder.ts"],"names":["secondsToMilliseconds","seconds","BaseBuilder","constructor","projectDir","options","command","prepareProjectInfo","run","e","BuildError","log","error","message","process","exit","Error","commandCheckStatus","checkStatus","exp","manifest","user","UserManager","ensureLoggedInAsync","checkProjectConfig","isDetached","platform","oldestSupportedMajorVersion","Versions","oldestSupportedMajorVersionAsync","semver","major","sdkVersion","version","newestSdkVersionAsync","warn","chalk","bold","checkForBuildInProgress","buildStatus","env","EXPO_LEGACY_API","Project","buildAsync","mode","current","releaseChannel","publicUrl","getBuildStatusAsync","jobs","length","err","logBuildStatuses","canPurchasePriorityBuilds","numberOfRemainingPriorityBuilds","hasUnlimitedPriorityBuilds","checkStatusBeforeBuild","reuseStatus","findReusableBuildAsync","slug","canReuse","underline","downloadUrl","username","owner","getCurrentUsernameAsync","forEach","job","i","packageExtension","UrlUtils","constructBuildLogsUrl","id","hasPriorityBuilds","shouldShowUpgradeInfo","priority","status","constructTurtleStatusUrl","artifacts","url","ensureReleaseExists","publish","ids","duringBuild","release","getLatestReleaseAsync","channel","publicationId","publishedTime","wait","buildId","interval","spinner","start","res","fp","compose","head","filter","getOr","succeed","text","fail","build","expIds","bundleIdentifier","result","opts","PLATFORMS","IOS","type","ANDROID","startBuildAsync","undefined","waitOpts","completedJob","artifactUrl","artifactId","constructArtifactUrl","green","ALL"],"mappings":"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","sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport { Project, User, UserManager, Versions } from '@expo/xdl';\nimport chalk from 'chalk';\nimport delayAsync from 'delay-async';\nimport fp from 'lodash/fp';\nimport get from 'lodash/get';\nimport ora from 'ora';\nimport semver from 'semver';\n\nimport * as UrlUtils from '../utils/url';\nimport log from '../../log';\nimport { action as publishAction } from '../publish';\nimport BuildError from './BuildError';\nimport { PLATFORMS, Platform } from './constants';\n\nimport { BuilderOptions } from './BaseBuilder.types';\n\nconst secondsToMilliseconds = (seconds: number): number => seconds * 1000;\n\nexport default class BaseBuilder {\n  manifest: ExpoConfig = {};\n  user?: User;\n\n  constructor(public projectDir: string, public options: BuilderOptions = {}) {}\n\n  async command() {\n    try {\n      await this.prepareProjectInfo();\n      await this.run();\n    } catch (e) {\n      if (!(e instanceof BuildError)) {\n        throw e;\n      } else {\n        log.error(e.message);\n        process.exit(1);\n      }\n    }\n  }\n\n  async run(): Promise<void> {\n    throw new Error('`run()` should be overridden');\n  }\n\n  async commandCheckStatus() {\n    try {\n      await this.prepareProjectInfo();\n      await this.checkStatus();\n    } catch (e) {\n      if (!(e instanceof BuildError)) {\n        throw e;\n      } else {\n        log.error(e.message);\n        process.exit(1);\n      }\n    }\n  }\n\n  async prepareProjectInfo(): Promise<void> {\n    // always use local json to unify behavior between regular apps and self hosted ones\n    const { exp } = getConfig(this.projectDir);\n    this.manifest = exp;\n    this.user = await UserManager.ensureLoggedInAsync();\n\n    await this.checkProjectConfig();\n  }\n\n  async checkProjectConfig(): Promise<void> {\n    if (this.manifest.isDetached) {\n      log.error(`'expo build:${this.platform()}' is not supported for detached projects.`);\n      process.exit(1);\n    }\n\n    // Warn user if building a project using the next deprecated SDK version\n    let oldestSupportedMajorVersion = await Versions.oldestSupportedMajorVersionAsync();\n    if (semver.major(this.manifest.sdkVersion!) === oldestSupportedMajorVersion) {\n      let { version } = await Versions.newestSdkVersionAsync();\n      log.warn(\n        `\\nSDK${oldestSupportedMajorVersion} will be ${chalk.bold(\n          'deprecated'\n        )} next! We recommend upgrading versions, ideally to the latest (SDK${semver.major(\n          version\n        )}), so you can continue to build new binaries of your app and develop in the Expo client.\\n`\n      );\n    }\n  }\n\n  async checkForBuildInProgress() {\n    log('Checking if there is a build in progress...\\n');\n    let buildStatus;\n    if (process.env.EXPO_LEGACY_API === 'true') {\n      buildStatus = await Project.buildAsync(this.projectDir, {\n        mode: 'status',\n        platform: this.platform(),\n        current: true,\n        releaseChannel: this.options.releaseChannel,\n        publicUrl: this.options.publicUrl,\n        sdkVersion: this.manifest.sdkVersion,\n      } as any);\n    } else {\n      buildStatus = await Project.getBuildStatusAsync(this.projectDir, {\n        platform: this.platform(),\n        current: true,\n        releaseChannel: this.options.releaseChannel,\n        publicUrl: this.options.publicUrl,\n        sdkVersion: this.manifest.sdkVersion,\n      } as any);\n    }\n    if ('jobs' in buildStatus && buildStatus.jobs?.length > 0) {\n      throw new BuildError('Cannot start a new build, as there is already an in-progress build.');\n    }\n  }\n\n  async checkStatus(platform: 'all' | 'ios' | 'android' = 'all'): Promise<void> {\n    log('Fetching build history...\\n');\n\n    let buildStatus: Project.BuildStatusResult | Project.BuildCreatedResult;\n    if (process.env.EXPO_LEGACY_API === 'true') {\n      buildStatus = await Project.buildAsync(this.projectDir, {\n        mode: 'status',\n        platform,\n        current: false,\n        releaseChannel: this.options.releaseChannel,\n      });\n    } else {\n      buildStatus = await Project.getBuildStatusAsync(this.projectDir, {\n        platform,\n        current: false,\n        releaseChannel: this.options.releaseChannel,\n      });\n    }\n    if ('err' in buildStatus && buildStatus.err) {\n      throw new Error('Error getting current build status for this project.');\n    }\n\n    // @ts-ignore: Property 'jobs' does not exist on type 'BuildCreatedResult'.\n    if (!(buildStatus.jobs && buildStatus.jobs.length)) {\n      log('No currently active or previous builds for this project.');\n      return;\n    }\n\n    await this.logBuildStatuses({\n      // @ts-ignore: Property 'jobs' does not exist on type 'BuildCreatedResult'.\n      jobs: buildStatus.jobs,\n      canPurchasePriorityBuilds: buildStatus.canPurchasePriorityBuilds,\n      numberOfRemainingPriorityBuilds: buildStatus.numberOfRemainingPriorityBuilds,\n      hasUnlimitedPriorityBuilds: buildStatus.hasUnlimitedPriorityBuilds,\n    });\n  }\n\n  async checkStatusBeforeBuild(): Promise<void> {\n    log('Checking if this build already exists...\\n');\n\n    const reuseStatus = await Project.findReusableBuildAsync(\n      this.options.releaseChannel!,\n      this.platform(),\n      this.manifest.sdkVersion!,\n      this.manifest.slug!\n    );\n    if (reuseStatus.canReuse) {\n      log.warn(`Did you know that Expo provides over-the-air updates?\nPlease see the docs (${chalk.underline(\n        'https://docs.expo.io/guides/configuring-ota-updates/'\n      )}) and check if you can use them instead of building your app binaries again.`);\n\n      log.warn(\n        `There were no new changes from the last build, you can download that build from here: ${chalk.underline(\n          reuseStatus.downloadUrl!\n        )}`\n      );\n    }\n  }\n\n  async logBuildStatuses(buildStatus: {\n    jobs: Array<Record<string, any>>;\n    canPurchasePriorityBuilds: boolean;\n    numberOfRemainingPriorityBuilds: number;\n    hasUnlimitedPriorityBuilds?: boolean;\n  }) {\n    log('=================');\n    log(' Builds Statuses ');\n    log('=================\\n');\n\n    const username = this.manifest.owner\n      ? this.manifest.owner\n      : await UserManager.getCurrentUsernameAsync();\n\n    buildStatus.jobs.forEach((job, i) => {\n      let platform, packageExtension;\n      if (job.platform === 'ios') {\n        platform = 'iOS';\n        packageExtension = 'IPA';\n      } else {\n        platform = 'Android';\n        packageExtension = 'APK';\n      }\n\n      log(`### ${i} | ${platform} | ${UrlUtils.constructBuildLogsUrl(job.id, username!)} ###`);\n\n      const hasPriorityBuilds =\n        buildStatus.numberOfRemainingPriorityBuilds > 0 || buildStatus.hasUnlimitedPriorityBuilds;\n      const shouldShowUpgradeInfo =\n        !hasPriorityBuilds &&\n        i === 0 &&\n        job.priority === 'normal' &&\n        buildStatus.canPurchasePriorityBuilds;\n      let status;\n      switch (job.status) {\n        case 'pending':\n        case 'sent-to-queue':\n          status = `Build waiting in queue...\\nQueue length: ${chalk.underline(\n            UrlUtils.constructTurtleStatusUrl()\n          )}`;\n          if (shouldShowUpgradeInfo) {\n            status += `\\nWant to wait less? Get priority builds at ${chalk.underline(\n              'https://expo.io/settings/billing'\n            )}.`;\n          }\n          break;\n        case 'started':\n          status = 'Build started...';\n          break;\n        case 'in-progress':\n          status = 'Build in progress...';\n          if (shouldShowUpgradeInfo) {\n            status += `\\nWant to wait less? Get priority builds at ${chalk.underline(\n              'https://expo.io/settings/billing'\n            )}.`;\n          }\n          break;\n        case 'finished':\n          status = 'Build finished.';\n          if (shouldShowUpgradeInfo) {\n            status += `\\nLooks like this build could have been faster.\\nRead more about priority builds at ${chalk.underline(\n              'https://expo.io/settings/billing'\n            )}.`;\n          }\n          break;\n        case 'errored':\n          status = 'There was an error with this build.';\n          if (job.id) {\n            status += `\n\nWhen requesting support, please provide this build ID:\n\n${job.id}\n`;\n          }\n          break;\n        default:\n          status = '';\n          break;\n      }\n\n      log(status);\n      if (job.status === 'finished') {\n        if (job.artifacts) {\n          log(`${packageExtension}: ${job.artifacts.url}`);\n        } else {\n          log(`Problem getting ${packageExtension} URL. Please try to build again.`);\n        }\n      }\n      log();\n    });\n  }\n\n  async ensureReleaseExists() {\n    if (this.options.publish) {\n      const { ids, url, err } = await publishAction(this.projectDir, {\n        ...this.options,\n        duringBuild: true,\n      });\n      if (err) {\n        throw new BuildError(`No url was returned from publish. Please try again.\\n${err}`);\n      } else if (!url || url === '') {\n        throw new BuildError('No url was returned from publish. Please try again.');\n      }\n      return ids;\n    } else {\n      log('Looking for releases...');\n      const release = await Project.getLatestReleaseAsync(this.projectDir, {\n        releaseChannel: this.options.releaseChannel!,\n        platform: this.platform(),\n        owner: this.manifest.owner,\n      });\n      if (!release) {\n        throw new BuildError('No releases found. Please create one using `expo publish` first.');\n      }\n      log(\n        `Using existing release on channel \"${release.channel}\":\\n` +\n          `publicationId: ${release.publicationId}\\n  publishedTime: ${release.publishedTime}`\n      );\n      return [release.publicationId];\n    }\n  }\n\n  async wait(\n    buildId: string,\n    { interval = 30, publicUrl }: { interval?: number; publicUrl?: string } = {}\n  ): Promise<any> {\n    log(\n      `Waiting for build to complete.\\nYou can press Ctrl+C to exit. It won't cancel the build, you'll be able to monitor it at the printed URL.`\n    );\n    let spinner = ora().start();\n    while (true) {\n      let res;\n      if (process.env.EXPO_LEGACY_API === 'true') {\n        res = await Project.buildAsync(this.projectDir, {\n          current: false,\n          mode: 'status',\n          ...(publicUrl ? { publicUrl } : {}),\n        });\n      } else {\n        res = await Project.getBuildStatusAsync(this.projectDir, {\n          current: false,\n          ...(publicUrl ? { publicUrl } : {}),\n        });\n      }\n      const job = fp.compose(\n        fp.head,\n        fp.filter(job => buildId && (job as any).id === buildId),\n        fp.getOr([], 'jobs')\n      )(res);\n\n      switch (job.status) {\n        case 'finished':\n          spinner.succeed('Build finished.');\n          return job;\n        case 'pending':\n        case 'sent-to-queue':\n          spinner.text = 'Build queued...';\n          break;\n        case 'started':\n        case 'in-progress':\n          spinner.text = 'Build in progress...';\n          break;\n        case 'errored':\n          spinner.fail('Build failed.');\n          throw new BuildError(`Standalone build failed!`);\n        default:\n          spinner.warn('Unknown status.');\n          throw new BuildError(`Unknown status: ${job.status} - aborting!`);\n      }\n      await delayAsync(secondsToMilliseconds(interval));\n    }\n  }\n\n  async build(expIds?: Array<string>) {\n    const { publicUrl } = this.options;\n    const platform = this.platform();\n    const bundleIdentifier = get(this.manifest, 'ios.bundleIdentifier');\n\n    let result: any;\n    if (process.env.EXPO_LEGACY_API === 'true') {\n      let opts: Record<string, any> = {\n        mode: 'create',\n        expIds,\n        platform,\n        releaseChannel: this.options.releaseChannel,\n        ...(publicUrl ? { publicUrl } : {}),\n      };\n\n      if (platform === PLATFORMS.IOS) {\n        opts = {\n          ...opts,\n          type: this.options.type,\n          bundleIdentifier,\n        };\n      } else if (platform === PLATFORMS.ANDROID) {\n        opts = {\n          ...opts,\n          type: this.options.type,\n        };\n      }\n\n      // call out to build api here with url\n      result = await Project.buildAsync(this.projectDir, opts);\n    } else {\n      let opts: Record<string, any> = {\n        expIds,\n        platform,\n        releaseChannel: this.options.releaseChannel,\n        ...(publicUrl ? { publicUrl } : {}),\n      };\n\n      if (platform === PLATFORMS.IOS) {\n        opts = {\n          ...opts,\n          type: this.options.type,\n          bundleIdentifier,\n        };\n      } else if (platform === PLATFORMS.ANDROID) {\n        opts = {\n          ...opts,\n          type: this.options.type,\n        };\n      }\n\n      // call out to build api here with url\n      result = await Project.startBuildAsync(this.projectDir, opts);\n    }\n    const { id: buildId, priority, canPurchasePriorityBuilds } = result;\n\n    log('Build started, it may take a few minutes to complete.');\n    log(\n      `You can check the queue length at ${chalk.underline(UrlUtils.constructTurtleStatusUrl())}\\n`\n    );\n    if (priority === 'normal' && canPurchasePriorityBuilds) {\n      log(\n        'You can make this faster. 🐢\\nGet priority builds at: https://expo.io/settings/billing\\n'\n      );\n    }\n\n    const username = this.manifest.owner\n      ? this.manifest.owner\n      : await UserManager.getCurrentUsernameAsync();\n\n    if (buildId) {\n      log(\n        `You can monitor the build at\\n\\n ${chalk.underline(\n          UrlUtils.constructBuildLogsUrl(buildId, username ?? undefined)\n        )}\\n`\n      );\n    }\n\n    if (this.options.wait) {\n      const waitOpts = publicUrl ? { publicUrl } : {};\n      const completedJob = await this.wait(buildId, waitOpts);\n      const artifactUrl = completedJob.artifactId\n        ? UrlUtils.constructArtifactUrl(completedJob.artifactId)\n        : completedJob.artifacts.url;\n      log(`${chalk.green('Successfully built standalone app:')} ${chalk.underline(artifactUrl)}`);\n    } else {\n      log('Alternatively, run `expo build:status` to monitor it from the command line.');\n    }\n  }\n\n  platform(): Platform {\n    return PLATFORMS.ALL;\n  }\n}\n"],"file":"BaseBuilder.js"}