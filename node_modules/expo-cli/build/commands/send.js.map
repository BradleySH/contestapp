{"version":3,"sources":["../../src/commands/send.ts"],"names":["action","projectDir","options","urlOpts","optsAsync","url","UrlUtils","constructManifestUrlAsync","chalk","underline","shouldQuit","handleMobileOptsAsync","recipient","sendTo","UserSettings","getAsync","askUser","askForSendToAsync","sendUrlAsync","log","gray","process","exit","program","command","description","option","asyncActionProjectDir"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,eAAeA,MAAf,CAAsBC,UAAtB,EAA0CC,OAA1C,EAAqF;AACnF,QAAMC,mBAAQC,SAAR,CAAkBH,UAAlB,EAA8BC,OAA9B,CAAN;AAEA,MAAIG,GAAG,GAAG,MAAMC,gBAASC,yBAAT,CAAmCN,UAAnC,CAAhB;AAEA,sBAAI,qCAAqCO,iBAAMC,SAAN,CAAgBJ,GAAhB,CAArC,GAA4D,IAAhE;AAEA,MAAIK,UAAU,GAAG,KAAjB;;AACA,MAAI,MAAMP,mBAAQQ,qBAAR,CAA8BV,UAA9B,EAA0CC,OAA1C,CAAV,EAA8D;AAC5DQ,IAAAA,UAAU,GAAG,IAAb;AACD;;AAED,MAAIA,UAAJ,EAAgB;AACd;AACD;;AAED,MAAIE,SAAJ;;AACA,MAAI,OAAOV,OAAO,CAACW,MAAf,KAA0B,SAA9B,EAAyC;AACvCD,IAAAA,SAAS,GAAGV,OAAO,CAACW,MAApB;AACD,GAFD,MAEO;AACLD,IAAAA,SAAS,GAAG,MAAME,oBAAaC,QAAb,CAAsB,QAAtB,EAAgC,IAAhC,CAAlB;AACD;;AAED,MAAI,CAACH,SAAL,EAAgB;AACdA,IAAAA,SAAS,GAAG,MAAMI,mBAAQC,iBAAR,EAAlB;AACD;;AAED,MAAIL,SAAJ,EAAe;AACb,UAAMC,kBAAOK,YAAP,CAAoBb,GAApB,EAAyBO,SAAzB,CAAN;AACD,GAFD,MAEO;AACLO,mBAAIC,IAAJ,CAAS,gEAAT;AACD;;AAEDC,EAAAA,OAAO,CAACC,IAAR;AACD;;AAEc,kBAAUC,OAAV,EAA4B;AACzCA,EAAAA,OAAO,CACJC,OADH,CACW,oBADX,EAEGC,WAFH,CAEe,kDAFf,EAGE;AAHF,GAIGC,MAJH,CAIU,uBAJV,EAImC,iDAJnC,EAKGvB,OALH,GAMGwB,qBANH,CAMyB3B,MANzB;AAOD","sourcesContent":["import chalk from 'chalk';\nimport { Command } from 'commander';\nimport { UrlUtils, UserSettings } from '@expo/xdl';\n\nimport askUser from '../askUser';\nimport log from '../log';\nimport sendTo from '../sendTo';\nimport urlOpts, { URLOptions } from '../urlOpts';\n\nasync function action(projectDir: string, options: { sendTo?: string } & URLOptions) {\n  await urlOpts.optsAsync(projectDir, options);\n\n  let url = await UrlUtils.constructManifestUrlAsync(projectDir);\n\n  log('Your project manifest URL is\\n\\n' + chalk.underline(url) + '\\n');\n\n  let shouldQuit = false;\n  if (await urlOpts.handleMobileOptsAsync(projectDir, options)) {\n    shouldQuit = true;\n  }\n\n  if (shouldQuit) {\n    return;\n  }\n\n  var recipient;\n  if (typeof options.sendTo !== 'boolean') {\n    recipient = options.sendTo;\n  } else {\n    recipient = await UserSettings.getAsync('sendTo', null);\n  }\n\n  if (!recipient) {\n    recipient = await askUser.askForSendToAsync();\n  }\n\n  if (recipient) {\n    await sendTo.sendUrlAsync(url, recipient);\n  } else {\n    log.gray(\"(Not sending anything because you didn't specify a recipient.)\");\n  }\n\n  process.exit();\n}\n\nexport default function (program: Command) {\n  program\n    .command('send [project-dir]')\n    .description('Sends a link to your project to an email address')\n    //.help('You must have the server running for this command to work')\n    .option('-s, --send-to  [dest]', 'Specifies the email address to send this URL to')\n    .urlOpts()\n    .asyncActionProjectDir(action);\n}\n"],"file":"send.js"}