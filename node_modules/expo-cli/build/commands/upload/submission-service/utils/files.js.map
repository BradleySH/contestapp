{"version":3,"sources":["../../../../../src/commands/upload/submission-service/utils/files.ts"],"names":["pipeline","stream","downloadAppArchiveAsync","url","dest","downloadStream","got","on","trackProgress","fs","createWriteStream","uploadAppArchiveAsync","path","fileSize","stat","size","UploadType","SUBMISSION_APP_ARCHIVE","_total","bar","transferredSoFar","progress","total","undefined","ProgressBar","complete","incomplete","tick","transferred"],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,MAAMA,QAAQ,GAAG,uBAAUC,kBAAOD,QAAjB,CAAjB;;AAEA,eAAeE,uBAAf,CAAuCC,GAAvC,EAAoDC,IAApD,EAAmF;AACjF,QAAMC,cAAc,GAAGC,eAAIL,MAAJ,CAAWE,GAAX,EAAgBI,EAAhB,CAAmB,kBAAnB,EAAuCC,aAAa,EAApD,CAAvB;;AACA,QAAMR,QAAQ,CAACK,cAAD,EAAiBI,mBAAGC,iBAAH,CAAqBN,IAArB,CAAjB,CAAd;AACA,SAAOA,IAAP;AACD;;AAED,eAAeO,qBAAf,CAAqCC,IAArC,EAAoE;AAClE,QAAMC,QAAQ,GAAG,CAAC,MAAMJ,mBAAGK,IAAH,CAAQF,IAAR,CAAP,EAAsBG,IAAvC;AACA,SAAO,MAAM,4BAAYC,sBAAWC,sBAAvB,EAA+CL,IAA/C,EAAqDJ,aAAa,CAACK,QAAD,CAAlE,CAAb;AACD;;AAID,SAASL,aAAT,CAAuBU,MAAvB,EAAyD;AACvD,MAAIC,GAAuB,GAAG,IAA9B;AACA,MAAIC,gBAAgB,GAAG,CAAvB;AACA,SAAQC,QAAD,IAAwB;AAC7B,QAAI,CAACF,GAAD,KAASE,QAAQ,CAACC,KAAT,KAAmBC,SAAnB,IAAgCL,MAAM,KAAKK,SAApD,CAAJ,EAAoE;AAClE,YAAMD,KAAK,GAAIJ,MAAJ,aAAIA,MAAJ,cAAIA,MAAJ,GAAcG,QAAQ,CAACC,KAAlC;AACAH,MAAAA,GAAG,GAAG,KAAIK,mBAAJ,EAAgB,uBAAhB,EAAyC;AAC7CC,QAAAA,QAAQ,EAAE,GADmC;AAE7CC,QAAAA,UAAU,EAAE,GAFiC;AAG7CJ,QAAAA;AAH6C,OAAzC,CAAN;AAKD;;AACD,QAAIH,GAAJ,EAAS;AACPA,MAAAA,GAAG,CAACQ,IAAJ,CAASN,QAAQ,CAACO,WAAT,GAAuBR,gBAAhC;AACD;;AACDA,IAAAA,gBAAgB,GAAGC,QAAQ,CAACO,WAA5B;AACD,GAbD;AAcD","sourcesContent":["import stream from 'stream';\nimport { promisify } from 'util';\n\nimport fs from 'fs-extra';\nimport got, { Progress } from 'got';\nimport ProgressBar from 'progress';\n\nimport { UploadType, uploadAsync } from '../../../../uploads';\n\nconst pipeline = promisify(stream.pipeline);\n\nasync function downloadAppArchiveAsync(url: string, dest: string): Promise<string> {\n  const downloadStream = got.stream(url).on('downloadProgress', trackProgress());\n  await pipeline(downloadStream, fs.createWriteStream(dest));\n  return dest;\n}\n\nasync function uploadAppArchiveAsync(path: string): Promise<string> {\n  const fileSize = (await fs.stat(path)).size;\n  return await uploadAsync(UploadType.SUBMISSION_APP_ARCHIVE, path, trackProgress(fileSize));\n}\n\ntype ProgressTracker = (progress: Progress) => void;\n\nfunction trackProgress(_total?: number): ProgressTracker {\n  let bar: ProgressBar | null = null;\n  let transferredSoFar = 0;\n  return (progress: Progress) => {\n    if (!bar && (progress.total !== undefined || _total !== undefined)) {\n      const total = (_total ?? progress.total) as number;\n      bar = new ProgressBar('[:bar] :percent :etas', {\n        complete: '=',\n        incomplete: ' ',\n        total,\n      });\n    }\n    if (bar) {\n      bar.tick(progress.transferred - transferredSoFar);\n    }\n    transferredSoFar = progress.transferred;\n  };\n}\n\nexport { downloadAppArchiveAsync, uploadAppArchiveAsync };\n"],"file":"files.js"}