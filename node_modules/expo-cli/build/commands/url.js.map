{"version":3,"sources":["../../src/commands/url.ts"],"names":["logArtifactUrl","platform","projectDir","options","publicUrl","UrlUtils","isHttps","CommandError","res","process","env","EXPO_LEGACY_API","Project","buildAsync","current","mode","getBuildStatusAsync","url","fp","compose","get","head","filter","job","getOr","log","nested","Error","getWebAppUrlAsync","webAppUrl","constructWebAppUrlAsync","action","urlOpts","optsAsync","currentStatus","web","constructManifestUrlAsync","newLine","printQRCode","chalk","underline","handleMobileOptsAsync","program","command","alias","option","description","allowOffline","asyncActionProjectDir"],"mappings":"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","sourcesContent":["import { Command } from 'commander';\nimport chalk from 'chalk';\nimport fp from 'lodash/fp';\nimport { Project, UrlUtils } from '@expo/xdl';\n\nimport CommandError from '../CommandError';\nimport log from '../log';\nimport urlOpts, { URLOptions } from '../urlOpts';\nimport printRunInstructionsAsync from '../printRunInstructionsAsync';\n\ntype ProjectUrlOptions = Command & {\n  web?: boolean;\n};\n\ntype ArtifactUrlOptions = {\n  publicUrl?: string;\n};\n\nconst logArtifactUrl = (platform: 'ios' | 'android') => async (\n  projectDir: string,\n  options: ArtifactUrlOptions\n) => {\n  if (options.publicUrl && !UrlUtils.isHttps(options.publicUrl)) {\n    throw new CommandError('INVALID_PUBLIC_URL', '--public-url must be a valid HTTPS URL.');\n  }\n\n  let res;\n  if (process.env.EXPO_LEGACY_API === 'true') {\n    res = await Project.buildAsync(projectDir, {\n      current: false,\n      mode: 'status',\n      ...(options.publicUrl ? { publicUrl: options.publicUrl } : {}),\n    });\n  } else {\n    res = await Project.getBuildStatusAsync(projectDir, {\n      current: false,\n      ...(options.publicUrl ? { publicUrl: options.publicUrl } : {}),\n    });\n  }\n  const url = fp.compose(\n    fp.get(['artifacts', 'url']),\n    fp.head,\n    fp.filter((job: any) => platform && job.platform === platform),\n    fp.getOr([], 'jobs')\n  )(res as any);\n  if (url) {\n    log.nested(url);\n  } else {\n    throw new Error(\n      `No ${platform} binary file found. Use \"expo build:${platform}\" to create one.`\n    );\n  }\n};\n\nasync function getWebAppUrlAsync(projectDir: string): Promise<string> {\n  const webAppUrl = await UrlUtils.constructWebAppUrlAsync(projectDir);\n  if (!webAppUrl) {\n    throw new CommandError(\n      'NOT_RUNNING',\n      `Expo web server is not running. Please start it with \\`expo start:web\\`.`\n    );\n  }\n  return webAppUrl;\n}\n\nasync function action(projectDir: string, options: ProjectUrlOptions & URLOptions) {\n  await urlOpts.optsAsync(projectDir, options);\n\n  if ((await Project.currentStatus(projectDir)) !== 'running') {\n    throw new CommandError(\n      'NOT_RUNNING',\n      `Project is not running. Please start it with \\`expo start\\`.`\n    );\n  }\n  const url = options.web\n    ? await getWebAppUrlAsync(projectDir)\n    : await UrlUtils.constructManifestUrlAsync(projectDir);\n\n  log.newLine();\n  urlOpts.printQRCode(url);\n\n  log('Your URL is\\n\\n' + chalk.underline(url) + '\\n');\n\n  if (!options.web) {\n    await printRunInstructionsAsync();\n    await urlOpts.handleMobileOptsAsync(projectDir, options);\n  }\n}\n\nexport default function (program: Command) {\n  program\n    .command('url [project-dir]')\n    .alias('u')\n    .option('-w, --web', 'Return the URL of the web app')\n    .description('Displays the URL you can use to view your project in Expo')\n    .urlOpts()\n    .allowOffline()\n    .asyncActionProjectDir(action);\n\n  program\n    .command('url:ipa [project-dir]')\n    .option('--public-url <url>', 'The URL of an externally hosted manifest (for self-hosted apps)')\n    .description('Displays the standalone iOS binary URL you can use to download your app binary')\n    .asyncActionProjectDir(logArtifactUrl('ios'));\n\n  program\n    .command('url:apk [project-dir]')\n    .option('--public-url <url>', 'The URL of an externally hosted manifest (for self-hosted apps)')\n    .description(\n      'Displays the standalone Android binary URL you can use to download your app binary'\n    )\n    .asyncActionProjectDir(logArtifactUrl('android'));\n}\n"],"file":"url.js"}