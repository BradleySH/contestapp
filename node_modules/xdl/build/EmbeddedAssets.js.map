{"version":3,"sources":["../src/EmbeddedAssets.ts"],"names":["configureAsync","config","_maybeWriteArtifactsToDiskAsync","_maybeConfigureExpoKitEmbeddedAssetsAsync","_maybeConfigureExpoUpdatesEmbeddedAssetsAsync","getEmbeddedManifestPath","platform","projectRoot","exp","ios","publishManifestPath","_getDefaultEmbeddedManifestPath","android","path","join","_getDefaultEmbeddedAssetDir","_getDefaultEmbeddedBundlePath","iosSupportingDirectory","getIOSPaths","Error","shouldEmbedAssetsForExpoUpdates","pkg","target","dependencies","expoUpdatesVersion","semver","coerce","satisfies","fs","existsSync","iosManifest","iosBundle","androidManifest","androidBundle","androidBundlePath","androidManifestPath","iosBundlePath","iosManifestPath","defaultAndroidDir","defaultIosDir","ensureDir","logger","global","warn","publishBundlePath","JSON","stringify","releaseChannel","androidManifestUrl","context","StandaloneContext","createUserContext","supportingDirectory","IosWorkspace","getPaths","IosPlist","modifyAsync","shellPlist","constantsPath","ExponentTools","deleteLinesInFileAsync","regexFileAsync","bundleUrl","isLikelyFirstPublish","iosManifestUrl","configPlist","EXUpdatesURL","EXUpdatesSDKVersion","sdkVersion","EXUpdatesReleaseChannel","cleanBackupAsync","androidManifestXmlPath","androidManifestXmlFile","readFileSync","expoUpdateUrlRegex","expoSdkVersionRegex","expoReleaseChannelRegex","expoUpdateUrlTag","expoSdkVersionTag","expoReleaseChannelTag","tagsToInsert","search","push","length","skipSDKVersionRequirement","projectName","name","iosProjectDirectory","IOSConfig","XcodeUtils","sanitizedName","iconPath"],"mappings":"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","sourcesContent":["import { ExpoAppManifest, getConfig, PackageJSONConfig, ProjectTarget } from '@expo/config';\nimport { IOSConfig } from '@expo/config-plugins';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport semver from 'semver';\n\nimport {\n  ExponentTools,\n  IosPlist,\n  IosWorkspace,\n  Logger as logger,\n  StandaloneContext,\n  writeArtifactSafelyAsync,\n} from './internal';\n\nexport type EmbeddedAssetsConfiguration = {\n  projectRoot: string;\n  pkg: PackageJSONConfig;\n  exp: ExpoAppManifest;\n  releaseChannel?: string;\n  iosManifestUrl: string;\n  iosManifest: any;\n  iosBundle: string | Uint8Array;\n  androidManifestUrl: string;\n  androidManifest: any;\n  androidBundle: string | Uint8Array;\n  target: ProjectTarget;\n};\n\nexport async function configureAsync(config: EmbeddedAssetsConfiguration) {\n  await _maybeWriteArtifactsToDiskAsync(config);\n  await _maybeConfigureExpoKitEmbeddedAssetsAsync(config);\n  await _maybeConfigureExpoUpdatesEmbeddedAssetsAsync(config);\n}\n\nexport function getEmbeddedManifestPath(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: ExpoAppManifest\n): string {\n  if (platform === 'ios') {\n    return exp.ios && exp.ios.publishManifestPath\n      ? exp.ios.publishManifestPath\n      : _getDefaultEmbeddedManifestPath(platform, projectRoot, exp);\n  } else if (platform === 'android') {\n    return exp.android && exp.android.publishManifestPath\n      ? exp.android.publishManifestPath\n      : _getDefaultEmbeddedManifestPath(platform, projectRoot, exp);\n  }\n  return _getDefaultEmbeddedManifestPath(platform, projectRoot, exp);\n}\n\nfunction _getDefaultEmbeddedManifestPath(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: ExpoAppManifest\n): string {\n  return path.join(_getDefaultEmbeddedAssetDir(platform, projectRoot, exp), 'app.manifest');\n}\n\nfunction _getDefaultEmbeddedBundlePath(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: ExpoAppManifest\n): string {\n  return path.join(_getDefaultEmbeddedAssetDir(platform, projectRoot, exp), 'app.bundle');\n}\n\nfunction _getDefaultEmbeddedAssetDir(\n  platform: 'ios' | 'android',\n  projectRoot: string,\n  exp: ExpoAppManifest\n): string {\n  if (platform === 'ios') {\n    const { iosSupportingDirectory } = getIOSPaths(projectRoot);\n    return iosSupportingDirectory;\n  } else if (platform === 'android') {\n    return path.join(projectRoot, 'android', 'app', 'src', 'main', 'assets');\n  } else {\n    throw new Error('Embedding assets is not supported for platform ' + platform);\n  }\n}\n\nexport function shouldEmbedAssetsForExpoUpdates(\n  projectRoot: string,\n  exp: ExpoAppManifest,\n  pkg: PackageJSONConfig,\n  target: ProjectTarget\n): boolean {\n  if (!pkg.dependencies?.['expo-updates'] || target !== 'bare') {\n    return false;\n  }\n\n  // semver.coerce can return null\n  const expoUpdatesVersion = semver.coerce(pkg.dependencies['expo-updates']);\n\n  // expo-updates 0.1.x relies on expo-cli automatically embedding the manifest and bundle\n  if (expoUpdatesVersion && semver.satisfies(expoUpdatesVersion, '~0.1.0')) {\n    return true;\n  }\n\n  // We also want to support developers who had expo-updates 0.1.x and upgraded but still rely on\n  // expo-cli's automatic embedding. If the files already exist we can assume we need to update them\n  if (\n    fs.existsSync(_getDefaultEmbeddedBundlePath('android', projectRoot, exp)) ||\n    fs.existsSync(_getDefaultEmbeddedManifestPath('android', projectRoot, exp)) ||\n    fs.existsSync(_getDefaultEmbeddedBundlePath('ios', projectRoot, exp)) ||\n    fs.existsSync(_getDefaultEmbeddedManifestPath('ios', projectRoot, exp))\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nasync function _maybeWriteArtifactsToDiskAsync(config: EmbeddedAssetsConfiguration) {\n  const {\n    projectRoot,\n    pkg,\n    exp,\n    iosManifest,\n    iosBundle,\n    androidManifest,\n    androidBundle,\n    target,\n  } = config;\n\n  let androidBundlePath;\n  let androidManifestPath;\n  let iosBundlePath;\n  let iosManifestPath;\n\n  if (shouldEmbedAssetsForExpoUpdates(projectRoot, exp, pkg, target)) {\n    const defaultAndroidDir = _getDefaultEmbeddedAssetDir('android', projectRoot, exp);\n    const defaultIosDir = _getDefaultEmbeddedAssetDir('ios', projectRoot, exp);\n\n    await fs.ensureDir(defaultIosDir);\n    await fs.ensureDir(defaultAndroidDir);\n\n    androidBundlePath = _getDefaultEmbeddedBundlePath('android', projectRoot, exp);\n    androidManifestPath = _getDefaultEmbeddedManifestPath('android', projectRoot, exp);\n    iosBundlePath = _getDefaultEmbeddedBundlePath('ios', projectRoot, exp);\n    iosManifestPath = _getDefaultEmbeddedManifestPath('ios', projectRoot, exp);\n\n    if (!fs.existsSync(iosBundlePath) || !fs.existsSync(iosManifestPath)) {\n      logger.global.warn(\n        'Creating app.manifest and app.bundle inside of your ios/<project>/Supporting directory.\\nBe sure to add these files to your Xcode project. More info at https://expo.fyi/embedded-assets'\n      );\n    }\n  }\n\n  // allow custom overrides\n  if (exp.android?.publishBundlePath) {\n    androidBundlePath = exp.android.publishBundlePath;\n  }\n  if (exp.android?.publishManifestPath) {\n    androidManifestPath = exp.android.publishManifestPath;\n  }\n  if (exp.ios?.publishBundlePath) {\n    iosBundlePath = exp.ios.publishBundlePath;\n  }\n  if (exp.ios?.publishManifestPath) {\n    iosManifestPath = exp.ios.publishManifestPath;\n  }\n\n  if (androidBundlePath) {\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishBundlePath',\n      androidBundlePath,\n      androidBundle\n    );\n  }\n\n  if (androidManifestPath) {\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishManifestPath',\n      androidManifestPath,\n      JSON.stringify(androidManifest)\n    );\n  }\n\n  if (iosBundlePath) {\n    await writeArtifactSafelyAsync(projectRoot, 'ios.publishBundlePath', iosBundlePath, iosBundle);\n  }\n\n  if (iosManifestPath) {\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishManifestPath',\n      iosManifestPath,\n      JSON.stringify(iosManifest)\n    );\n  }\n}\n\nasync function _maybeConfigureExpoKitEmbeddedAssetsAsync(config: EmbeddedAssetsConfiguration) {\n  const { projectRoot, exp, releaseChannel, androidManifestUrl, androidManifest } = config;\n\n  const context = StandaloneContext.createUserContext(projectRoot, exp);\n  const { supportingDirectory } = IosWorkspace.getPaths(context);\n\n  // iOS ExpoKit\n  if (releaseChannel && fs.existsSync(path.join(supportingDirectory, 'EXShell.plist'))) {\n    // This is an ExpoKit app, set properties in EXShell.plist\n    await IosPlist.modifyAsync(supportingDirectory, 'EXShell', (shellPlist: any) => {\n      shellPlist.releaseChannel = releaseChannel;\n      return shellPlist;\n    });\n  }\n\n  // Android ExpoKit\n  const constantsPath = path.join(\n    projectRoot,\n    'android',\n    'app',\n    'src',\n    'main',\n    'java',\n    'host',\n    'exp',\n    'exponent',\n    'generated',\n    'AppConstants.java'\n  );\n  if (fs.existsSync(constantsPath)) {\n    // This is an ExpoKit app\n    // We need to add EmbeddedResponse instances on Android to tell the runtime\n    // that the shell app manifest and bundle is packaged.\n    await ExponentTools.deleteLinesInFileAsync(\n      `START EMBEDDED RESPONSES`,\n      `END EMBEDDED RESPONSES`,\n      constantsPath\n    );\n    await ExponentTools.regexFileAsync(\n      '// ADD EMBEDDED RESPONSES HERE',\n      `\n      // ADD EMBEDDED RESPONSES HERE\n      // START EMBEDDED RESPONSES\n      embeddedResponses.add(new Constants.EmbeddedResponse(\"${androidManifestUrl}\", \"assets://shell-app-manifest.json\", \"application/json\"));\n      embeddedResponses.add(new Constants.EmbeddedResponse(\"${androidManifest.bundleUrl}\", \"assets://shell-app.bundle\", \"application/javascript\"));\n      // END EMBEDDED RESPONSES`,\n      constantsPath\n    );\n    if (releaseChannel) {\n      await ExponentTools.regexFileAsync(\n        /RELEASE_CHANNEL = \"[^\"]*\"/,\n        `RELEASE_CHANNEL = \"${releaseChannel}\"`,\n        constantsPath\n      );\n    }\n  }\n}\n\nasync function _maybeConfigureExpoUpdatesEmbeddedAssetsAsync(config: EmbeddedAssetsConfiguration) {\n  if (!config.pkg.dependencies?.['expo-updates'] || config.target === 'managed') {\n    return;\n  }\n\n  let isLikelyFirstPublish = false;\n\n  const { projectRoot, exp, releaseChannel, iosManifestUrl, androidManifestUrl } = config;\n\n  const { iosSupportingDirectory: supportingDirectory } = getIOSPaths(projectRoot);\n\n  // iOS expo-updates\n  if (fs.existsSync(path.join(supportingDirectory, 'Expo.plist'))) {\n    // This is an app with expo-updates installed, set properties in Expo.plist\n    await IosPlist.modifyAsync(supportingDirectory, 'Expo', (configPlist: any) => {\n      if (configPlist.EXUpdatesURL === 'YOUR-APP-URL-HERE') {\n        isLikelyFirstPublish = true;\n      }\n      configPlist.EXUpdatesURL = iosManifestUrl;\n      configPlist.EXUpdatesSDKVersion = exp.sdkVersion;\n      if (releaseChannel) {\n        configPlist.EXUpdatesReleaseChannel = releaseChannel;\n      }\n      return configPlist;\n    });\n    await IosPlist.cleanBackupAsync(supportingDirectory, 'Expo', false);\n  }\n\n  // Android expo-updates\n  const androidManifestXmlPath = path.join(\n    projectRoot,\n    'android',\n    'app',\n    'src',\n    'main',\n    'AndroidManifest.xml'\n  );\n  const androidManifestXmlFile = fs.readFileSync(androidManifestXmlPath, 'utf8');\n  const expoUpdateUrlRegex = /<meta-data[^>]+\"expo.modules.updates.EXPO_UPDATE_URL\"[^>]+\\/>/;\n  const expoSdkVersionRegex = /<meta-data[^>]+\"expo.modules.updates.EXPO_SDK_VERSION\"[^>]+\\/>/;\n  const expoReleaseChannelRegex = /<meta-data[^>]+\"expo.modules.updates.EXPO_RELEASE_CHANNEL\"[^>]+\\/>/;\n\n  const expoUpdateUrlTag = `<meta-data android:name=\"expo.modules.updates.EXPO_UPDATE_URL\" android:value=\"${androidManifestUrl}\" />`;\n  const expoSdkVersionTag = `<meta-data android:name=\"expo.modules.updates.EXPO_SDK_VERSION\" android:value=\"${exp.sdkVersion}\" />`;\n  const expoReleaseChannelTag = `<meta-data android:name=\"expo.modules.updates.EXPO_RELEASE_CHANNEL\" android:value=\"${releaseChannel}\" />`;\n\n  const tagsToInsert = [];\n  if (androidManifestXmlFile.search(expoUpdateUrlRegex) < 0) {\n    tagsToInsert.push(expoUpdateUrlTag);\n  }\n  if (androidManifestXmlFile.search(expoSdkVersionRegex) < 0) {\n    tagsToInsert.push(expoSdkVersionTag);\n  }\n  if (releaseChannel && androidManifestXmlFile.search(expoReleaseChannelRegex) < 0) {\n    tagsToInsert.push(expoReleaseChannelTag);\n  }\n  if (tagsToInsert.length) {\n    // try to insert the meta-data tags that aren't found\n    await ExponentTools.regexFileAsync(\n      /<activity\\s+android:name=\".MainActivity\"/,\n      `${tagsToInsert.join('\\n      ')}\n\n  <activity\n    android:name=\".MainActivity\"`,\n      androidManifestXmlPath\n    );\n  }\n  await ExponentTools.regexFileAsync(expoUpdateUrlRegex, expoUpdateUrlTag, androidManifestXmlPath);\n  await ExponentTools.regexFileAsync(\n    expoSdkVersionRegex,\n    expoSdkVersionTag,\n    androidManifestXmlPath\n  );\n  if (releaseChannel) {\n    await ExponentTools.regexFileAsync(\n      expoReleaseChannelRegex,\n      expoReleaseChannelTag,\n      androidManifestXmlPath\n    );\n  }\n\n  if (isLikelyFirstPublish) {\n    logger.global.warn(\n      '🚀 It looks like this your first publish for this project! ' +\n        \"We've automatically set some configuration values in Expo.plist and AndroidManifest.xml. \" +\n        \"You'll need to make a new build with these changes before you can download the update \" +\n        'you just published.'\n    );\n  }\n}\n\n/** The code below here is duplicated from expo-cli currently **/\n\n// TODO: it's silly and kind of fragile that we look at app config to determine\n// the ios project paths. Overall this function needs to be revamped, just a\n// placeholder for now! Make this more robust when we support applying config\n// at any time (currently it's only applied on eject).\nexport function getIOSPaths(projectRoot: string) {\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  const projectName = exp.name;\n  if (!projectName) {\n    throw new Error('Your project needs a name in app.json/app.config.js.');\n  }\n\n  const iosProjectDirectory = path.join(\n    projectRoot,\n    'ios',\n    IOSConfig.XcodeUtils.sanitizedName(projectName)\n  );\n  const iosSupportingDirectory = path.join(\n    projectRoot,\n    'ios',\n    IOSConfig.XcodeUtils.sanitizedName(projectName),\n    'Supporting'\n  );\n  const iconPath = path.join(iosProjectDirectory, 'Assets.xcassets', 'AppIcon.appiconset');\n\n  return {\n    projectName,\n    iosProjectDirectory,\n    iosSupportingDirectory,\n    iconPath,\n  };\n}\n"],"file":"EmbeddedAssets.js"}