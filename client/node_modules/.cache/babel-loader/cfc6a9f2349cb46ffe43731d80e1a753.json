{"ast":null,"code":"var _jsxFileName = \"/Users/markgw/Desktop/dev/contestapp/client/pinion-games/src/components/ClientForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"../client.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ClientForm = props => {\n  _s();\n\n  const initInputs = {\n    name: '',\n    access: '',\n    commissioner: null\n  };\n  const [inputs, setInputs] = useState(initInputs);\n  const [toggle, setToggle] = useState(false);\n  const {\n    submit\n  } = props;\n\n  function handleChange(e) {\n    const {\n      name,\n      value\n    } = e.target;\n    setInputs(prevInputs => ({ ...prevInputs,\n      [name]: value\n    }));\n  } //   think in order to get this to a modal we will need to wrap the form in a turnary and set the CSS or make separate Modal.js\n  //   then just set this form container to a button to open the modal.  My brain is shot though.   We could reuse that modal as well in \n  //   other pages like the commisioner page\n\n\n  return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n    className: \"form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create a New Client\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"client-form\",\n      onSubmit: e => submit(e, inputs),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleChange,\n        type: \"text\",\n        name: \"name\",\n        value: inputs.name,\n        placeholder: \"Client Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleChange,\n        type: \"text\",\n        name: \"access\",\n        value: inputs.access,\n        placeholder: \"Access Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Create Client\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ClientForm, \"YnVSH1KHdeQ1RglSqaK+BBCkgws=\");\n\n_c = ClientForm;\nexport default ClientForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClientForm\");","map":{"version":3,"sources":["/Users/markgw/Desktop/dev/contestapp/client/pinion-games/src/components/ClientForm.js"],"names":["useState","ClientForm","props","initInputs","name","access","commissioner","inputs","setInputs","toggle","setToggle","submit","handleChange","e","value","target","prevInputs"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAO,gBAAP;;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAE1B,QAAMC,UAAU,GAAG;AAACC,IAAAA,IAAI,EAAE,EAAP;AAAWC,IAAAA,MAAM,EAAE,EAAnB;AAAuBC,IAAAA,YAAY,EAAE;AAArC,GAAnB;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAACG,UAAD,CAApC;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,KAAD,CAApC;AAEA,QAAM;AAACW,IAAAA;AAAD,MAAWT,KAAjB;;AAEA,WAASU,YAAT,CAAsBC,CAAtB,EAAwB;AACpB,UAAM;AAACT,MAAAA,IAAD;AAAOU,MAAAA;AAAP,QAAgBD,CAAC,CAACE,MAAxB;AACAP,IAAAA,SAAS,CAACQ,UAAU,KAAK,EAAC,GAAGA,UAAJ;AAAgB,OAACZ,IAAD,GAAQU;AAAxB,KAAL,CAAX,CAAT;AACH,GAXyB,CAc1B;AACA;AACA;;;AACA,sBACI;AAAU,IAAA,SAAS,EAAC,gBAApB;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAM,MAAA,SAAS,EAAC,aAAhB;AAA8B,MAAA,QAAQ,EAAGD,CAAD,IAAOF,MAAM,CAACE,CAAD,EAAIN,MAAJ,CAArD;AAAA,8BACI;AAAO,QAAA,QAAQ,EAAEK,YAAjB;AAA+B,QAAA,IAAI,EAAC,MAApC;AAA2C,QAAA,IAAI,EAAC,MAAhD;AAAuD,QAAA,KAAK,EAAEL,MAAM,CAACH,IAArE;AAA2E,QAAA,WAAW,EAAC;AAAvF;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,QAAQ,EAAEQ,YAAjB;AAA+B,QAAA,IAAI,EAAC,MAApC;AAA2C,QAAA,IAAI,EAAC,QAAhD;AAAyD,QAAA,KAAK,EAAEL,MAAM,CAACF,MAAvE;AAA+E,QAAA,WAAW,EAAC;AAA3F;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CA3BD;;GAAMJ,U;;KAAAA,U;AA6BN,eAAeA,UAAf","sourcesContent":["import { useState } from \"react\";\nimport \"../client.scss\";\n\nconst ClientForm = (props) => {\n\n    const initInputs = {name: '', access: '', commissioner: null}\n    const [inputs, setInputs] = useState(initInputs);\n    const [toggle, setToggle] = useState(false)\n\n    const {submit} = props\n\n    function handleChange(e){\n        const {name, value} = e.target\n        setInputs(prevInputs => ({...prevInputs, [name]: value}))\n    }\n\n\n    //   think in order to get this to a modal we will need to wrap the form in a turnary and set the CSS or make separate Modal.js\n    //   then just set this form container to a button to open the modal.  My brain is shot though.   We could reuse that modal as well in \n    //   other pages like the commisioner page\n    return (\n        <fieldset className=\"form-container\">\n            <h2>Create a New Client</h2>\n            <form className=\"client-form\" onSubmit={(e) => submit(e, inputs)}>\n                <input onChange={handleChange} type=\"text\" name=\"name\" value={inputs.name} placeholder=\"Client Name\" />\n                <input onChange={handleChange} type=\"text\" name=\"access\" value={inputs.access} placeholder=\"Access Code\" />\n                <button>Create Client</button>\n            </form>\n        </fieldset>\n    )\n}\n\nexport default ClientForm"]},"metadata":{},"sourceType":"module"}