{"ast":null,"code":"var _jsxFileName = \"/Users/markgw/Desktop/dev/contestapp/client/pinion-games/src/pages/Contests.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useContext, useState } from 'react';\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport SubHeader from \"../components/SubHeader\";\nimport { UserContext } from \"../context/UserProvider\";\nimport EventCard from '../components/EventCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst userAxios = axios.create();\nuserAxios.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  config.headers.Authorization = `Bearer ${token}`;\n  return config;\n});\n\nconst Contests = () => {\n  _s();\n\n  const {\n    user: {\n      client,\n      role\n    }\n  } = useContext(UserContext);\n  const [contests, setContests] = useState([]);\n\n  function getContests() {\n    if (role === \"admin\") {\n      userAxios.get(`/api/event/`).then(res => showContests(res.data)).catch(err => console.log(err));\n    }\n\n    userAxios.get(`/api/event/client/${client}`).then(res => showContests(res.data)).catch(err => console.log(err));\n  }\n\n  function showContests(events) {\n    const contests = events.filter(event => event.type === \"contest\");\n    setContests(contests);\n  }\n\n  const roleRestrictions = [\"admin\", \"commissioner\"];\n  useEffect(() => {\n    getContests();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SubHeader, {\n      header1: \"GAMiNG\",\n      header2: \"CONTESTS\",\n      color: \"#1c3557\",\n      imgUrl: \"/images/contests.png\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Contests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), roleRestrictions.includes(role) ? /*#__PURE__*/_jsxDEV(Link, {\n      to: {\n        pathname: \"/createevent\",\n        state: {\n          type: \"Contest\",\n          client: client\n        }\n      },\n      children: \"Create New Contest\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 48\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: contests.map(contest => /*#__PURE__*/_jsxDEV(EventCard, {\n        eventObj: contest,\n        name: contest.title,\n        _id: contest._id,\n        date: contest.eventDate\n      }, contest._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 42\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Contests, \"CG4WVgPKYbNCFQRPm2a/4Da9T8E=\");\n\n_c = Contests;\nexport default Contests;\n\nvar _c;\n\n$RefreshReg$(_c, \"Contests\");","map":{"version":3,"sources":["/Users/markgw/Desktop/dev/contestapp/client/pinion-games/src/pages/Contests.js"],"names":["useEffect","useContext","useState","Link","axios","SubHeader","UserContext","EventCard","userAxios","create","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","Contests","user","client","role","contests","setContests","getContests","get","then","res","showContests","data","catch","err","console","log","events","filter","event","type","roleRestrictions","includes","pathname","state","map","contest","title","_id","eventDate"],"mappings":"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","sourcesContent":["import { useEffect, useContext, useState } from 'react'\nimport {Link} from \"react-router-dom\"\nimport axios from \"axios\"\n\nimport SubHeader from \"../components/SubHeader\"\nimport { UserContext } from \"../context/UserProvider\"\nimport EventCard from '../components/EventCard'\n\nconst userAxios = axios.create()\nuserAxios.interceptors.request.use(config => {\n    const token = localStorage.getItem(\"token\")\n    config.headers.Authorization = `Bearer ${token}`\n    return config\n})\n\nconst Contests = () => {\n\n    const {user: {client, role}} = useContext(UserContext)\n\n    const [contests, setContests] = useState([])\n\n    function getContests(){\n        if(role === \"admin\"){\n            userAxios.get(`/api/event/`)\n            .then(res => showContests(res.data))\n            .catch(err => console.log(err))\n        }\n            userAxios.get(`/api/event/client/${client}`)\n                .then(res => showContests(res.data))\n                .catch(err => console.log(err))\n    }\n\n    function showContests(events){\n        const contests = events.filter(event => event.type === \"contest\")\n        setContests(contests)\n    }\n\n    const roleRestrictions = [\"admin\", \"commissioner\"]\n\n    useEffect(() => {\n        getContests()\n    }, [])\n\n    return (\n        <>\n            <SubHeader header1={\"GAMiNG\"} header2={\"CONTESTS\"} color={\"#1c3557\"} imgUrl={\"/images/contests.png\"} />\n            <h2>Contests</h2>\n            {roleRestrictions.includes(role) ? <Link to={{pathname: \"/createevent\", state: {type: \"Contest\", client: client}}}>Create New Contest</Link> : null}\n            <fieldset>\n                {contests.map(contest => <EventCard key={contest._id} eventObj={contest} name={contest.title} _id={contest._id} date={contest.eventDate} />)}\n            </fieldset>\n        </>\n    )\n}\n\nexport default Contests"]},"metadata":{},"sourceType":"module"}